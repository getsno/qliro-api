{
  "props": {
    "pageProps": {
      "merchantJson": {
        "x-generator": "NSwag v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))",
        "openapi": "3.0.0",
        "info": {
          "title": "Qliro.Payments.MerchantApi API",
          "version": "v1"
        },
        "servers": [
          {
            "url": "https://pago.qit.nu/checkout/merchantapi"
          }
        ],
        "paths": {
          "/Orders": {
            "post": {
              "tags": [
                "Orders"
              ],
              "summary": "Creates new order",
              "description": "When the merchant is ready to load Qliro Checkout, the order is created on Qliro end through this request",
              "operationId": "createOrder",
              "requestBody": {
                "x-name": "createOrderRequest",
                "description": "Order details to be created",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/CreateOrderRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "201": {
                  "description": "HTTP Header: Location with the new resource",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateOrderResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and DetailedErrorMessage more details",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                }
              }
            },
            "get": {
              "tags": [
                "Orders"
              ],
              "summary": "Gets existing order by merchant reference",
              "description": "MerchantReference is merchant's order id. The MerchantReference provided in the CreateOrder request can be used to get the order information",
              "operationId": "getOrderByMerchantReference",
              "parameters": [
                {
                  "name": "merchantReference",
                  "in": "query",
                  "description": "Order merchant reference to get order by",
                  "schema": {
                    "type": "string",
                    "nullable": true
                  },
                  "x-position": 1
                }
              ],
              "responses": {
                "200": {
                  "description": "Information about the order, together with the HTML snippet used to deploy the Qliro Checkout frontend application. If the CustomerCheckoutStatus is Completed or OnHold, there will be a non-empty list of OrderItems",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetOrderResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Possible reasons: arguments cannot be null, invalid input, invalid order id",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Order not found",
                  "content": {
                    "application/octet-stream": {
                      "schema": {
                        "type": "string",
                        "format": "binary"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/Orders/{id}": {
            "put": {
              "tags": [
                "Orders"
              ],
              "summary": "Updates existing order",
              "description": "Once an order is created, the merchant can update the list of OrderItems by sending an UpdateOrder request",
              "operationId": "updateOrder",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "Id of order to update",
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "x-position": 1
                }
              ],
              "requestBody": {
                "x-name": "updateOrderRequest",
                "description": "Order details to be updated",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/UpdateOrderRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 2
              },
              "responses": {
                "200": {
                  "description": "HTTP Header: Location with the updated resource",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and DetailedErrorMessage more details",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                }
              }
            },
            "get": {
              "tags": [
                "Orders"
              ],
              "summary": "Gets existing order",
              "description": "Once an order is created, the merchant will receive the corresponding OrderId in the HTTP header of the response. The OrderId returned by createOrder operation can be used to get the order information",
              "operationId": "getOrder",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "Order id to get order by",
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "x-position": 1
                }
              ],
              "responses": {
                "200": {
                  "description": "Information about the order, together with the HTML snippet used to deploy the Qliro Checkout frontend application. If the CustomerCheckoutStatus is Completed or OnHold, there will be a non-empty list of OrderItems",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetOrderResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Possible reasons: arguments cannot be null, invalid input, invalid order id",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Order not found",
                  "content": {
                    "application/octet-stream": {
                      "schema": {
                        "type": "string",
                        "format": "binary"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/Upsell": {
            "post": {
              "tags": [
                "Upsell"
              ],
              "summary": "Upsell order",
              "description": "Once an order is completed and eligible for Upsell, merchant can add list of OrderItems to the existing order by sending an Upsell request",
              "operationId": "upsellOrder",
              "requestBody": {
                "x-name": "request",
                "description": "Upsell order request",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/UpsellOrderRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "200": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UpsellOrderResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more details.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/CreateMerchantSavedCreditCard": {
            "post": {
              "tags": [
                "MerchantCreditCard"
              ],
              "summary": "Saves new credit card",
              "description": "This request will work similar to Create Order html snippet population. When customer will complete new credit card registration and payment become successful redirections will be performed to merchant specified MerchantConfirmationUrl. Note new credit card token registration can take time depends of credit card provider. Merchant will be notified about new merchant credit card details by push notification to MerchantSavedCreditCardPushUrl",
              "operationId": "createMerchantSavedCreditCard",
              "requestBody": {
                "x-name": "createMerchantSavedCreditCardRequest",
                "description": "Request to save credit card for recurring orders.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/CreateMerchantSavedCreditCardRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "200": {
                  "description": "HTTP Header: Location with the new resource",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateMerchantSavedCreditCardResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and DetailedErrorMessage for more details",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/RemoveMerchantSavedCreditCard": {
            "delete": {
              "tags": [
                "MerchantCreditCard"
              ],
              "summary": "Removes existing credit card",
              "description": "This request can be used to remove a saved credit card information from Qliro system",
              "operationId": "removeMerchantSavedCreditCard",
              "requestBody": {
                "x-name": "removeMerchantCreditCardRequest",
                "description": "Request to remove existing credit card information.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/RemoveMerchantSavedCreditCardRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "400": {
                  "description": "See ErrorCode and DetailedErrorMessage for more details",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/InStore/orders": {
            "post": {
              "tags": [
                "InStore"
              ],
              "summary": "Initiates new order",
              "description": "When merchant is ready to initiate InStore order this request should be used",
              "operationId": "createInStoreOrder",
              "requestBody": {
                "x-name": "createInStoreOrderRequest",
                "description": "Order to be created",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/CreateInStoreOrderRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "201": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateOrderResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and DetailedErrorMessage for more details",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/InStore/orders/{id}": {
            "get": {
              "tags": [
                "InStore"
              ],
              "summary": "Gets existing order details",
              "description": "Once an order is created, customer will receive an SMS containing PaymentLink to proceed with order",
              "operationId": "getInStoreOrder",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "QliroOne Order Id",
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "x-position": 1
                }
              ],
              "responses": {
                "200": {
                  "description": "Response contains order information along with PaymentLink for customer to proceed with order.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetInStoreOrderResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Possible reasons: arguments cannot be null, invalid input, invalid order id",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Order not found",
                  "content": {
                    "application/octet-stream": {
                      "schema": {
                        "type": "string",
                        "format": "binary"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/CreditCheckInformation/{id}": {
            "get": {
              "tags": [
                "CreditCheckInformation"
              ],
              "summary": "Credit Check Information",
              "description": "Get credit check information using payment transaction id",
              "operationId": "CreditCheckInformation_Get",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "Payment Transaction Id",
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "x-position": 1
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetCreditCheckInformationResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "/PaymentOptions": {
            "post": {
              "tags": [
                "PaymentOptions"
              ],
              "summary": "Gets payment options",
              "operationId": "getPaymentOptions",
              "requestBody": {
                "x-name": "request",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GetPaymentOptionsRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "400": {
                  "description": "See ErrorCode and DetailedErrorMessage more details",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/PaymentWidget/orders": {
            "post": {
              "tags": [
                "PaymentWidget"
              ],
              "summary": "Creates new widget order",
              "description": "When the merchant wants to use a payment widget, the order is created on Qliro end through this request",
              "operationId": "createPaymentWidgetOrder",
              "requestBody": {
                "x-name": "createPaymentWidgetOrderRequest",
                "description": "Order details to be created",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/CreatePaymentWidgetOrderRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "201": {
                  "description": "Contains the order id for the newly created payment widget order",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateOrderResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and DetailedErrorMessage more details",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/PaymentWidget/orders/{id}": {
            "get": {
              "tags": [
                "PaymentWidget"
              ],
              "summary": "Gets an existing payment widget order",
              "description": "Once an order is created, the merchant will receive the corresponding OrderId the response. The OrderId returned by createOrder operation can be used to get the order information",
              "operationId": "getPaymentWidgetOrder",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "Order id to get order by",
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "x-position": 1
                }
              ],
              "responses": {
                "200": {
                  "description": "Information about the order, together with more information to be able to intialize the widget front end api. If the CustomerCheckoutStatus is Completed or OnHold, there will be a non-empty list of OrderItems",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetPaymentWidgetOrderResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Possible reasons: arguments cannot be null, invalid input, invalid order id",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Order not found",
                  "content": {
                    "application/octet-stream": {
                      "schema": {
                        "type": "string",
                        "format": "binary"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/BackwardsCompatibilityCheck": {
            "get": {
              "tags": [
                "BackwardsCompatibilityCheck"
              ],
              "summary": "Get BackwardsCompatibility response model",
              "description": "Returns predefined model for e2e validation",
              "operationId": "BackwardsCompatibilityCheck_Get",
              "responses": {
                "200": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ResponseModel"
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "tags": [
                "BackwardsCompatibilityCheck"
              ],
              "summary": "Post BackwardsCompatibility request model",
              "description": "Accepts predefined model for e2e validation",
              "operationId": "BackwardsCompatibilityCheck_Post",
              "requestBody": {
                "x-name": "request",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/RequestModel"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "200": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {}
                    }
                  }
                },
                "400": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {}
                    }
                  }
                }
              }
            }
          }
        },
        "components": {
          "schemas": {
            "GetCreditCheckInformationResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "HistoricalFraud": {
                  "type": "boolean",
                  "nullable": true
                },
                "CreditReport": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "CreateOrderResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "OrderId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 12345
                },
                "PaymentLink": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "ErrorResponseModel": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "ErrorCode": {
                  "type": "string",
                  "description": "Unique error code",
                  "nullable": true,
                  "example": "ORDER_NOT_FOUND"
                },
                "DetailedErrorMessage": {
                  "type": "string",
                  "description": "Detailed error message",
                  "nullable": true,
                  "example": "Order not found"
                },
                "ErrorReference": {
                  "type": "string",
                  "description": "A tracking ID from Qliro Checkout",
                  "format": "guid",
                  "example": "d7da92f4-1ad9-48c3-9cd3-26559c98e64c"
                }
              }
            },
            "CreateInStoreOrderRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "MerchantReference",
                    "Currency",
                    "Country",
                    "Language",
                    "MerchantTermsUrl",
                    "MerchantOrderManagementStatusPushUrl",
                    "MerchantCheckoutStatusPushUrl",
                    "OrderItems",
                    "CustomerInformation"
                  ],
                  "properties": {
                    "MerchantReference": {
                      "type": "string",
                      "description": "A string generated by the merchant to identify the order uniquely in their system. Maximum length is 25 characters.",
                      "minLength": 1,
                      "pattern": "^[A-Za-z0-9_-]{1,25}$",
                      "example": "MerchantUniqueReference"
                    },
                    "Currency": {
                      "type": "string",
                      "description": "Three uppercase characters, in accordance with ISO 4217.",
                      "minLength": 1,
                      "example": "SEK"
                    },
                    "Country": {
                      "type": "string",
                      "description": "Two upper case characters. In accordance with ISO 3166-1.",
                      "minLength": 1,
                      "example": "SE"
                    },
                    "Language": {
                      "type": "string",
                      "description": "Locale indicative for language & other location-specific details.",
                      "minLength": 1,
                      "example": "sv-se"
                    },
                    "MerchantTermsUrl": {
                      "type": "string",
                      "description": "A URL where the customer can find the merchant's terms and conditions.",
                      "format": "uri",
                      "minLength": 1,
                      "example": "https://merchant.com/terms/"
                    },
                    "MerchantIntegrityPolicyUrl": {
                      "type": "string",
                      "description": "A URL where the customer can find the merchant's integrity policy.",
                      "format": "uri",
                      "nullable": true,
                      "example": "https://merchant.com/policy/"
                    },
                    "MerchantOrderValidationUrl": {
                      "type": "string",
                      "description": "If specified, Qliro will use this URL to try to validate the order before completing the purchase. Info about authentication for this request can be found below. Should use https.",
                      "nullable": true,
                      "example": "https://merchant.com/orderValidation/"
                    },
                    "MerchantOrderManagementStatusPushUrl": {
                      "type": "string",
                      "description": "Qliro will use this URL to send notifications on payment status changes during the order management process, for example when the payment created by MarkItemsAsShipped call becomes successful. Info about authentication for this request can be found below. Should use https.",
                      "minLength": 1,
                      "example": "https://ordermanagement.merchant.com/ordermanagementstatus"
                    },
                    "MerchantCheckoutStatusPushUrl": {
                      "type": "string",
                      "description": "Qliro will use this URL to send customer checkout status updates. For example when the checkout status switches from OnHold to Completed. Info about authentication for this request can be found below. Should use https.",
                      "minLength": 1,
                      "example": "https://ordermanagement.merchant.com/checkoutstatus"
                    },
                    "OrderItems": {
                      "type": "array",
                      "description": "List of items customer added to the cart. ",
                      "items": {
                        "$ref": "#/components/schemas/OrderItem"
                      }
                    },
                    "CustomerInformation": {
                      "description": "Customer information used to try to identify the customer without user interaction. ",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/CustomerInformation"
                        }
                      ]
                    },
                    "MinimumCustomerAge": {
                      "type": "integer",
                      "description": "If specified, the customer will have to be at least this old to complete a purchase with Qliro Checkout. This will prevent the customer from authenticating as a company.",
                      "format": "int32",
                      "maximum": 2147483647,
                      "minimum": 0,
                      "nullable": true,
                      "example": 18
                    }
                  }
                }
              ]
            },
            "OrderItem": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "MerchantReference",
                "Quantity",
                "PricePerItemIncVat"
              ],
              "properties": {
                "MerchantReference": {
                  "type": "string",
                  "description": "A string generated by the merchant to identify the order item. The combination of MerchantReference and Price Per Item Including Vat is used to uniquely identify the order item. Maximum length is 200 characters.",
                  "minLength": 1,
                  "pattern": "^[\\p{L}\\s(.)'\\-_&,\\/–+0-9:]{1,200}$",
                  "example": "RedHat"
                },
                "Description": {
                  "type": "string",
                  "description": "A name or description of the order item.",
                  "maxLength": 4000,
                  "nullable": true,
                  "example": "Red hat original product"
                },
                "Type": {
                  "type": "string",
                  "description": "Can be 'Product', 'Discount', 'Fee' or 'Shipping'",
                  "nullable": true,
                  "example": "Product"
                },
                "Quantity": {
                  "type": "integer",
                  "description": "The number of these items in the cart.",
                  "format": "int32",
                  "maximum": 2147483647,
                  "minimum": 1,
                  "example": 3
                },
                "PricePerItemIncVat": {
                  "type": "number",
                  "description": "The price per item including Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99, 99.9 or 99.99.",
                  "format": "decimal",
                  "example": 375.55
                },
                "PricePerItemExVat": {
                  "type": "number",
                  "description": "The price per item excluding Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99, 99.9 or 99.99.",
                  "format": "decimal",
                  "example": 300.35
                },
                "Metadata": {
                  "description": "Only available in create order and update order requests. Can be used to indicate if an item includes some kind of risk. If an item has been flagged with the property HasRisk, then depending on the merchant setup in Qliro Checkout, some payment methods will be disabled. This behavior is customizable in the merchant preferences. It can also be used to indicate that an order item is a subscription. If it is indicated as a subscription Qliro Checkout will show some additional terms for Qliro invoice if Qliro invoice is enabled for the merchant.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MetadataContainer"
                    }
                  ]
                }
              }
            },
            "MetadataContainer": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "HasRisk": {
                  "type": "boolean",
                  "description": "If true, order item considered as risk item. Default is false.",
                  "nullable": true,
                  "example": true
                },
                "Subscription": {
                  "description": "It indicates that order item is a subscription if Enabled is true.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Subscription"
                    }
                  ]
                },
                "TravelInformation": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TravelInformation"
                    }
                  ]
                },
                "Ingrid": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Ingrid"
                    }
                  ]
                },
                "MerchantData": {
                  "type": "string",
                  "maxLength": 250,
                  "nullable": true
                }
              }
            },
            "Subscription": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Enabled": {
                  "type": "boolean"
                }
              }
            },
            "TravelInformation": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "DepartureCountry": {
                  "type": "string",
                  "nullable": true
                },
                "DepartureCity": {
                  "type": "string",
                  "nullable": true
                },
                "DepartureIATACode": {
                  "type": "string",
                  "nullable": true
                },
                "ArrivalCountry": {
                  "type": "string",
                  "nullable": true
                },
                "ArrivalCity": {
                  "type": "string",
                  "nullable": true
                },
                "ArrivalIATACode": {
                  "type": "string",
                  "nullable": true
                },
                "StopOverCountry": {
                  "type": "string",
                  "nullable": true
                },
                "StopOverCity": {
                  "type": "string",
                  "nullable": true
                },
                "StopOverIATACode": {
                  "type": "string",
                  "nullable": true
                },
                "TravelType": {
                  "type": "string",
                  "nullable": true
                },
                "BookingDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "DepartureDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "ReturnDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "DaysToDeparture": {
                  "type": "integer",
                  "format": "int32"
                },
                "NoOfPassengers": {
                  "type": "integer",
                  "format": "int32"
                },
                "Travelers": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Traveler"
                  }
                },
                "Class": {
                  "type": "string",
                  "nullable": true
                },
                "Airline": {
                  "type": "string",
                  "nullable": true
                },
                "NoOfLuggage": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "Traveler": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "FirstName": {
                  "type": "string",
                  "nullable": true
                },
                "LastName": {
                  "type": "string",
                  "nullable": true
                },
                "IsMainTraveller": {
                  "type": "boolean"
                },
                "Gender": {
                  "$ref": "#/components/schemas/Gender"
                },
                "DateOfBirth": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "Gender": {
              "type": "integer",
              "description": "",
              "x-enumNames": [
                "Unknown",
                "Female",
                "Male"
              ],
              "enum": [
                0,
                1,
                2
              ]
            },
            "Ingrid": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Weight": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": true
                },
                "Sku": {
                  "type": "string",
                  "nullable": true
                },
                "ShippingDate": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ShippingDateRange"
                    }
                  ]
                },
                "Attributes": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "type": "string"
                  }
                },
                "Dimensions": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ItemDimensions"
                    }
                  ]
                },
                "OutOfStock": {
                  "type": "boolean",
                  "nullable": true
                },
                "Discount": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true
                }
              }
            },
            "ShippingDateRange": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Start": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true
                },
                "End": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true
                }
              }
            },
            "ItemDimensions": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Height": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": true
                },
                "Length": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": true
                },
                "Width": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": true
                }
              }
            },
            "CustomerInformation": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "MobileNumber"
              ],
              "properties": {
                "PersonalNumber": {
                  "type": "string",
                  "description": "A national identification number to identify the customer.",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": "111111-1111"
                },
                "Email": {
                  "type": "string",
                  "description": "The customer's email address",
                  "maxLength": 255,
                  "minLength": 0,
                  "nullable": true,
                  "example": "email@domain.com"
                },
                "MobileNumber": {
                  "type": "string",
                  "description": "The customer's mobile number",
                  "maxLength": 50,
                  "minLength": 0,
                  "example": "+46101010101"
                },
                "Address": {
                  "description": "The customer's address. If provided and complete, the address will be presented as an alternative to the address fetched by Qliro Checkout. For B2B customer treat this address as billing address",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Address"
                    }
                  ]
                },
                "LockCustomerAddress": {
                  "type": "boolean",
                  "description": "If true, provided valid Address become order ShippingAddress. If no valid address is provided, this flag will be ignored.",
                  "nullable": true,
                  "example": false
                }
              }
            },
            "Address": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "FirstName": {
                  "type": "string",
                  "description": "The first name of a physical customer's address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true,
                  "example": "John"
                },
                "LastName": {
                  "type": "string",
                  "description": "The Last name of a physical customer's address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true,
                  "example": "Doe"
                },
                "CompanyName": {
                  "type": "string",
                  "description": "Address holders company name, only applicable for Company Customers",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true,
                  "example": "Qliro AB"
                },
                "Street": {
                  "type": "string",
                  "description": "The street name and number of the address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true,
                  "example": "Sveavägen 151"
                },
                "Street2": {
                  "type": "string",
                  "description": "The secondary address line for apartment, suite, department, unit, building, floor etc. Used for company customers and for physical customers in the following countries:\nAustralia, Bosnia and Herzegovina, Canada, Croatia, Cyprus, Czech Rebublic, Estonia, France, Greece, Hungary, Iceland, Ireland, Italy, Lithuania,\nLuxembourg, Macedonia, Malta, Montenegro, Poland, Portugal, Romania, Serbia, Slovakia, Slovenia, Spain, UK, US, Åland.",
                  "maxLength": 40,
                  "minLength": 0,
                  "nullable": true,
                  "example": "lgh 1001"
                },
                "PostalCode": {
                  "type": "string",
                  "description": "The postal code of the address.",
                  "maxLength": 15,
                  "minLength": 0,
                  "nullable": true,
                  "example": 12345
                },
                "City": {
                  "type": "string",
                  "description": "The city of the address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true,
                  "example": "Stockholm"
                },
                "CareOf": {
                  "type": "string",
                  "description": "Used if the addressee doesn't have a standard address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true,
                  "example": "Jane Doe"
                },
                "Area": {
                  "type": "string",
                  "description": "The State/Province/Region of the address. Used in the following countries:\nAustralia, Bosnia and Herzegovina, Canada, Cyprus, Ireland, Italy, Lithuania,Luxembourg, Macedonia, Malta, Montenegro, Romania, US, Åland.",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true,
                  "example": "New York"
                },
                "AreaCode": {
                  "type": "string",
                  "description": "Geographical area code in ISO3166-2 format.",
                  "maxLength": 10,
                  "minLength": 0,
                  "nullable": true,
                  "example": "US-NY"
                }
              }
            },
            "RequestBase": {
              "type": "object",
              "x-abstract": true,
              "additionalProperties": false,
              "required": [
                "MerchantApiKey"
              ],
              "properties": {
                "MerchantApiKey": {
                  "type": "string",
                  "description": "Will be provided by Qliro Checkout when setting up merchant account",
                  "maxLength": 50,
                  "minLength": 0,
                  "example": "MerchantApiKey"
                }
              }
            },
            "GetInStoreOrderResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetOrderResponseBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "PaymentLink": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PaymentLinkData"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "PaymentLinkData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Link": {
                  "type": "string",
                  "nullable": true,
                  "example": "https://secure.qit.nu/instore/?encryptedId=abc"
                }
              }
            },
            "GetOrderResponseBase": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "OrderId": {
                  "type": "integer",
                  "description": "Qliro Checkout order id.",
                  "format": "int64",
                  "example": 12345
                },
                "MerchantReference": {
                  "type": "string",
                  "description": "A string generated by the merchant to identify the order uniquely in their system. Maximum length is 25 characters.",
                  "nullable": true,
                  "example": "MerchantUniqueReference"
                },
                "TotalPrice": {
                  "type": "number",
                  "format": "decimal",
                  "example": 1576.65
                },
                "Currency": {
                  "type": "string",
                  "nullable": true,
                  "example": "SEK"
                },
                "Country": {
                  "type": "string",
                  "nullable": true,
                  "example": "SE"
                },
                "Language": {
                  "type": "string",
                  "nullable": true,
                  "example": "sv-se"
                },
                "CustomerCheckoutStatus": {
                  "type": "string",
                  "nullable": true,
                  "example": "Success"
                },
                "CustomerVerifiedEmail": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CustomerVerifiedEmailData"
                    }
                  ]
                },
                "Customer": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Customer"
                    }
                  ]
                },
                "BillingAddress": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Address2"
                    }
                  ]
                },
                "ShippingAddress": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Address2"
                    }
                  ]
                },
                "OrderItems": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/OrderItem2"
                  }
                },
                "PaymentMethod": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PaymentMethod"
                    }
                  ]
                },
                "SignupForNewsletter": {
                  "type": "boolean",
                  "nullable": true,
                  "example": true
                },
                "AskForNewsletterSignupChecked": {
                  "type": "boolean",
                  "nullable": true,
                  "example": true
                },
                "IdentityVerification": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IdentityVerification"
                    }
                  ]
                },
                "MerchantProvidedMetadata": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/MerchantProvidedMetadataTag"
                  }
                }
              }
            },
            "CustomerVerifiedEmailData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "UpdateVerifiedEmailLink": {
                  "type": "string",
                  "nullable": true,
                  "example": "https://www.qliro.com/sv-se"
                },
                "VerifiedEmail": {
                  "type": "string",
                  "nullable": true,
                  "example": "verified@email.com"
                },
                "VerifiedEmailDiffers": {
                  "type": "boolean",
                  "example": true
                }
              }
            },
            "Customer": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "FirstName": {
                  "type": "string",
                  "nullable": true,
                  "example": "FirstName"
                },
                "LastName": {
                  "type": "string",
                  "nullable": true,
                  "example": "LastName"
                },
                "PersonalNumber": {
                  "type": "string",
                  "nullable": true,
                  "example": "111111-1111"
                },
                "VatNumber": {
                  "type": "string",
                  "nullable": true,
                  "example": "SE111111111101"
                },
                "Email": {
                  "type": "string",
                  "nullable": true,
                  "example": "email@domain.com"
                },
                "MobileNumber": {
                  "type": "string",
                  "nullable": true,
                  "example": "+46101010101"
                },
                "JuridicalType": {
                  "example": "Physical",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/JuridicalType"
                    }
                  ]
                },
                "DateOfBirth": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "example": "1990-01-01"
                },
                "Gender": {
                  "nullable": true,
                  "example": "Male",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Gender"
                    }
                  ]
                }
              }
            },
            "JuridicalType": {
              "type": "integer",
              "description": "",
              "x-enumNames": [
                "Physical",
                "Company"
              ],
              "enum": [
                0,
                1
              ]
            },
            "Address2": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "FirstName": {
                  "type": "string",
                  "nullable": true,
                  "example": "First"
                },
                "LastName": {
                  "type": "string",
                  "nullable": true,
                  "example": "Last"
                },
                "CompanyName": {
                  "type": "string",
                  "nullable": true,
                  "example": null
                },
                "CareOf": {
                  "type": "string",
                  "nullable": true
                },
                "Street": {
                  "type": "string",
                  "nullable": true,
                  "example": "Street"
                },
                "Street2": {
                  "type": "string",
                  "nullable": true,
                  "example": "Street2"
                },
                "PostalCode": {
                  "type": "string",
                  "nullable": true,
                  "example": 12345
                },
                "City": {
                  "type": "string",
                  "nullable": true,
                  "example": "City"
                },
                "CountryCode": {
                  "type": "string",
                  "nullable": true,
                  "example": "SE"
                },
                "Area": {
                  "type": "string",
                  "nullable": true,
                  "example": "Area"
                },
                "AreaCode": {
                  "type": "string",
                  "description": "Currently only used for US. Will contain the ISO-3166-2 code for the current state (Area)",
                  "nullable": true,
                  "example": "US-CA"
                }
              }
            },
            "OrderItem2": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "MerchantReference": {
                  "type": "string",
                  "nullable": true,
                  "example": "MerchantUniqueReference"
                },
                "Description": {
                  "type": "string",
                  "nullable": true,
                  "example": "Original product"
                },
                "Quantity": {
                  "type": "integer",
                  "format": "int32",
                  "example": 5
                },
                "PricePerItemIncVat": {
                  "type": "number",
                  "format": "decimal",
                  "example": 10
                },
                "PricePerItemExVat": {
                  "type": "number",
                  "format": "decimal",
                  "example": 8
                },
                "Type": {
                  "example": "Product",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OrderItemType"
                    }
                  ]
                },
                "Metadata": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Metadata"
                    }
                  ]
                },
                "PaymentTransactionId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 123456
                }
              }
            },
            "OrderItemType": {
              "type": "integer",
              "description": "",
              "x-enumNames": [
                "Product",
                "Discount",
                "Fee",
                "Shipping"
              ],
              "enum": [
                0,
                1,
                2,
                3
              ]
            },
            "Metadata": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "ShippingMethodMerchantReference": {
                  "type": "string",
                  "nullable": true,
                  "example": "UniqueMerchantReference"
                },
                "ShippingMethodSecondaryOptionMerchantReference": {
                  "type": "string",
                  "nullable": true,
                  "example": "UniqueMerchantReference"
                },
                "ShippingMethodAccessCode": {
                  "type": "string",
                  "nullable": true,
                  "example": "ACCESS_CODE"
                },
                "AdditionalShippingProperties": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdditionalShippingPropertiesData"
                    }
                  ]
                },
                "MerchantData": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "AdditionalShippingPropertiesData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "ShippingProvider": {
                  "type": "string",
                  "nullable": true
                },
                "ServiceId": {
                  "type": "string",
                  "nullable": true
                },
                "Agent": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AgentData"
                    }
                  ]
                }
              }
            },
            "AgentData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Id": {
                  "type": "string",
                  "nullable": true
                },
                "Name": {
                  "type": "string",
                  "nullable": true
                },
                "MapLongitude": {
                  "type": "number",
                  "format": "double",
                  "nullable": true
                },
                "MapLatitude": {
                  "type": "number",
                  "format": "double",
                  "nullable": true
                },
                "Address1": {
                  "type": "string",
                  "nullable": true
                },
                "Address2": {
                  "type": "string",
                  "nullable": true
                },
                "ZipCode": {
                  "type": "string",
                  "nullable": true
                },
                "City": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "PaymentMethod": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PaymentMethodName": {
                  "type": "string",
                  "nullable": true,
                  "example": "PaymentMethodName"
                },
                "PaymentTypeCode": {
                  "type": "string",
                  "nullable": true,
                  "example": "PaymentTypeCode"
                }
              }
            },
            "IdentityVerification": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "RequireIdentityVerification": {
                  "type": "boolean",
                  "nullable": true,
                  "example": false
                },
                "IdentityVerified": {
                  "type": "boolean",
                  "nullable": true,
                  "example": false
                }
              }
            },
            "MerchantProvidedMetadataTag": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Key": {
                  "type": "string",
                  "description": "Merchant provided metadata element key. Max string length is 50.",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": "PromoCode"
                },
                "Value": {
                  "type": "string",
                  "description": "Merchant provided metadata element value. Max string length is 250.",
                  "maxLength": 250,
                  "minLength": 0,
                  "nullable": true,
                  "example": "ABC123"
                }
              }
            },
            "CreateMerchantSavedCreditCardResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "OrderId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 12345
                },
                "OrderForRegistrationTokenHtmlSnippet": {
                  "type": "string",
                  "nullable": true,
                  "example": "{script tag}"
                }
              }
            },
            "CreateMerchantSavedCreditCardRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "MerchantReference",
                    "Currency",
                    "Country",
                    "Language",
                    "MerchantSavedCreditCardPushUrl",
                    "Customer"
                  ],
                  "properties": {
                    "MerchantReference": {
                      "type": "string",
                      "description": "A string generated by the merchant to identify the order uniquely in their system. Maximum length is 25 characters.",
                      "minLength": 1,
                      "pattern": "^[A-Za-z0-9_-]{1,25}$",
                      "example": "MerchantUniqueReference"
                    },
                    "Currency": {
                      "type": "string",
                      "description": "Three uppercase characters, in accordance with ISO 4217.",
                      "minLength": 1,
                      "example": "SEK"
                    },
                    "Country": {
                      "type": "string",
                      "description": "Two upper case characters. In accordance with ISO 3166-1.",
                      "minLength": 1,
                      "example": "SE"
                    },
                    "Language": {
                      "type": "string",
                      "description": "Locale indicative for language & other location-specific details.",
                      "minLength": 1,
                      "example": "sv-se"
                    },
                    "MerchantSavedCreditCardPushUrl": {
                      "type": "string",
                      "description": "Qliro will use this URL to send notifications on saved merchant credit card.",
                      "minLength": 1,
                      "example": "https://merchant.com/MerchantSavedCreditCardPushUrl/"
                    },
                    "MerchantConfirmationUrl": {
                      "type": "string",
                      "description": "A URL to where Qliro will redirect the the customer once the payment is completed.",
                      "format": "uri",
                      "nullable": true,
                      "example": "https://merchant.com/confirmation/"
                    },
                    "Customer": {
                      "description": "Customer information used to try to identify the customer without user interaction. ",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/CustomerInformation2"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "CustomerInformation2": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "Email",
                "JuridicalType",
                "MobileNumber"
              ],
              "properties": {
                "PersonalNumber": {
                  "type": "string",
                  "description": "A national identification number to identify the customer.",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": "111111-1111"
                },
                "VatNumber": {
                  "type": "string",
                  "description": "Value added tax number for Company use.",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": "SE111111111101"
                },
                "Email": {
                  "type": "string",
                  "description": "The customer's email address",
                  "maxLength": 255,
                  "minLength": 0,
                  "example": "email@domain.com"
                },
                "JuridicalType": {
                  "type": "string",
                  "description": "'Physical' or 'Company'. If 'Company', the PersonalNumber parameter will be interpreted as an organization number.",
                  "minLength": 1,
                  "example": "Physical"
                },
                "MobileNumber": {
                  "type": "string",
                  "description": "The customer's mobile number",
                  "maxLength": 50,
                  "minLength": 0,
                  "example": "+46101010101"
                },
                "PostalCode": {
                  "type": "string",
                  "description": "The customer’s  postal code",
                  "maxLength": 15,
                  "minLength": 0,
                  "nullable": true,
                  "example": 12345
                }
              }
            },
            "RemoveMerchantSavedCreditCardRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "MerchantSavedCreditCardId": {
                      "type": "string",
                      "description": "Qliro provided an Id in notification to merchant when credit card was saved. Use same Id to remove credit card from Qliro system. ",
                      "format": "guid",
                      "example": "d7da92f4-1ad9-48c3-9cd3-26559c98e64c"
                    }
                  }
                }
              ]
            },
            "CreateOrderRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "MerchantReference",
                    "Currency",
                    "Country",
                    "Language",
                    "MerchantTermsUrl",
                    "MerchantConfirmationUrl",
                    "OrderItems"
                  ],
                  "properties": {
                    "MerchantReference": {
                      "type": "string",
                      "description": "A string generated by the merchant to identify the order uniquely in their system. Maximum length is 25 characters.",
                      "minLength": 1,
                      "pattern": "^[A-Za-z0-9_-]{1,25}$",
                      "example": "MerchantUniqueReference"
                    },
                    "Currency": {
                      "type": "string",
                      "description": "Three uppercase characters, in accordance with ISO 4217.",
                      "minLength": 1,
                      "example": "SEK"
                    },
                    "Country": {
                      "type": "string",
                      "description": "Two upper case characters. In accordance with ISO 3166-1.",
                      "minLength": 1,
                      "example": "SE"
                    },
                    "Language": {
                      "type": "string",
                      "description": "Locale indicative for language & other location-specific details.",
                      "minLength": 1,
                      "example": "sv-se"
                    },
                    "MerchantTermsUrl": {
                      "type": "string",
                      "description": "A URL where the customer can find the merchant's terms and conditions.",
                      "format": "uri",
                      "minLength": 1,
                      "example": "https://merchant.com/terms/"
                    },
                    "MerchantIntegrityPolicyUrl": {
                      "type": "string",
                      "description": "A URL where the customer can find the merchant's integrity policy.",
                      "format": "uri",
                      "nullable": true,
                      "example": "https://merchant.com/policy/"
                    },
                    "MerchantConfirmationUrl": {
                      "type": "string",
                      "description": "A URL to where Qliro will redirect the the customer once the payment is completed.",
                      "format": "uri",
                      "minLength": 1,
                      "example": "https://merchant.com/confirmation/"
                    },
                    "MerchantOrderValidationUrl": {
                      "type": "string",
                      "description": "If specified, Qliro will use this URL to try to validate the order before completing the purchase. Info about authentication for this request can be found below. Should use https.",
                      "nullable": true,
                      "example": "https://merchant.com/orderValidation/"
                    },
                    "MerchantOrderAvailableShippingMethodsUrl": {
                      "type": "string",
                      "description": "Used if Qliro Checkout should handle the shipping interaction with the customer. This URL will be used to fetch new Shipping Methods when customer information updates. See the Update Shipping Methods section under Notifications. Info about authentication for this request can be found below. Should use https.",
                      "nullable": true,
                      "example": "https://merchant.com/avaliableShippingMethods/"
                    },
                    "MerchantOrderManagementStatusPushUrl": {
                      "type": "string",
                      "description": "Qliro will use this URL to send notifications on payment status changes during the order management process, for example when the payment created by MarkItemsAsShipped call becomes successful. This must either be provided in the request or configured for you by Qliro. Info about authentication for this request can be found below. Should use https.",
                      "nullable": true,
                      "example": "https://ordermanagement.merchant.com/checkoutstatus"
                    },
                    "MerchantNotificationUrl": {
                      "type": "string",
                      "description": "Qliro will use this URL to send notifications for general status updates. For example if you are using integrated shipping providers (e.g. nShift or Ingrid) this url will be called when we complete or if we get an error from the shipping provider api:s.",
                      "nullable": true,
                      "example": "https://ordermanagement.merchant.com/checkoutstatus"
                    },
                    "MerchantCheckoutStatusPushUrl": {
                      "type": "string",
                      "description": "Qliro will use this URL to send customer checkout status updates. For example when the checkout status switches from OnHold to Completed. This must either be provided in the request or configured for you by Qliro. Info about authentication for this request can be found below. Should use https.",
                      "nullable": true,
                      "example": "https://ordermanagement.merchant.com/checkoutstatus"
                    },
                    "MerchantSavedCreditCardPushUrl": {
                      "type": "string",
                      "description": "Qliro will use this URL to send notifications on saved merchant credit card.",
                      "nullable": true,
                      "example": "https://ordermanagement.merchant.com/creditcard"
                    },
                    "MerchantOrderAvailableShippingAddressesUrl": {
                      "type": "string",
                      "description": "Used if merchant is willing to provide a list of predefined shipping addresses for customer to choose from. This URL will be used to fetch Available Shipping Addresses when customer information updates. See the Update Shipping Addresses section under Notifications. Info about authentication for this request can be found below. Should use https.",
                      "nullable": true,
                      "example": "https://merchant.com/avaliableShippingAddresses/"
                    },
                    "PrimaryColor": {
                      "type": "string",
                      "description": "Hex color code to use as primary color in Qliro Checkout.",
                      "nullable": true,
                      "example": "#00AB84"
                    },
                    "CallToActionColor": {
                      "type": "string",
                      "description": "Hex color code to use as call to action color in Qliro Checkout.",
                      "nullable": true,
                      "example": "#00AB84"
                    },
                    "CallToActionHoverColor": {
                      "type": "string",
                      "description": "Hex color code to use as call to action hover color in Qliro Checkout. If not provided, the hover color will be a blend between the call to action color and the background color.",
                      "nullable": true,
                      "example": "#24BB99"
                    },
                    "BackgroundColor": {
                      "type": "string",
                      "description": "Hex color code to use as background color in Qliro Checkout. Only colors with saturation <= 10% are supported. If a color with saturation > 10% is provided, the saturation will be lowered to 10%.",
                      "nullable": true,
                      "example": "#F7F7F7"
                    },
                    "CornerRadius": {
                      "type": "integer",
                      "description": "A pixel value to be used on corners throughout Qliro Checkout.",
                      "format": "int32",
                      "maximum": 1000,
                      "minimum": 0,
                      "nullable": true,
                      "example": 7
                    },
                    "ButtonCornerRadius": {
                      "type": "integer",
                      "description": "A pixel value to be used on corners of buttons throughout Qliro Checkout.",
                      "format": "int32",
                      "maximum": 1000,
                      "minimum": 0,
                      "nullable": true,
                      "example": 20
                    },
                    "OrderItems": {
                      "type": "array",
                      "description": "List of items customer added to the cart.",
                      "items": {
                        "$ref": "#/components/schemas/OrderItem"
                      }
                    },
                    "CustomerInformation": {
                      "description": "Customer information used to try to identify the customer without user interaction.",
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/CustomerInformation3"
                        }
                      ]
                    },
                    "AvailableShippingMethods": {
                      "type": "array",
                      "description": "Used if Qliro Checkout should handle the shipping interaction with the customer.",
                      "nullable": true,
                      "items": {
                        "$ref": "#/components/schemas/AvailableShippingMethod"
                      }
                    },
                    "EnforcedJuridicalType": {
                      "type": "string",
                      "description": "If specified, only the selected juridical type will be allowed in Qliro Checkout. 'Physical' or 'Company'.",
                      "nullable": true,
                      "example": "Physical"
                    },
                    "MinimumCustomerAge": {
                      "type": "integer",
                      "description": "If specified, the customer will have to be at least this old to complete a purchase with Qliro Checkout. This will prevent the customer from authenticating as a company.",
                      "format": "int32",
                      "maximum": 2147483647,
                      "minimum": 0,
                      "nullable": true,
                      "example": 18
                    },
                    "AskForNewsletterSignup": {
                      "type": "boolean",
                      "description": "If true, Qliro Checkout will ask the customer if they want to sign up for a newsletter. This will be communicated back in the Get Order response, if the customer completed the purchase.",
                      "nullable": true,
                      "example": true
                    },
                    "AskForNewsletterSignupChecked": {
                      "type": "boolean",
                      "description": "If true, Qliro Checkout will set signup newsletter as checked. This will be communicated back in the Get Order response, if the customer completed the purchase.",
                      "nullable": true,
                      "example": true
                    },
                    "AskForNewsletterSignupText": {
                      "type": "string",
                      "description": "This text will replace the default AskForNewsletterSignup text shown in the checkout. Can contain any letter, digits, space character, comma, ., ?, !, ', \" and be at most 50 characters long. It is not allowed to start or end the text with a space character.",
                      "nullable": true,
                      "example": "Yes, please send me the newsletter"
                    },
                    "MerchantProvidedQuestion": {
                      "description": "If used a question will be shown. If any requirements are not met the merchant provided question will be ignored.",
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/MerchantProvidedQuestionContainer"
                        }
                      ]
                    },
                    "RequireIdentityVerification": {
                      "type": "boolean",
                      "description": "Defaults to false. If true and the order country is Sweden, the customer will be asked to verify their identity with BankID when completing the purchase.",
                      "nullable": true,
                      "example": false
                    },
                    "ShippingAdditionalHeader": {
                      "type": "string",
                      "description": "If submitted, Qliro Checkout will show this text as a sub header below the shipping header. At most 100 characters.",
                      "maxLength": 300,
                      "nullable": true
                    },
                    "ApplicableFees": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/ApplicableFeeContainer"
                        }
                      ]
                    },
                    "MerchantConstraintName": {
                      "type": "string",
                      "description": "Enables dynamic filtering of payment channels available in specific orders.",
                      "maxLength": 100,
                      "minLength": 0,
                      "nullable": true,
                      "example": "CUSTOM_RULE"
                    },
                    "ShippingConfiguration": {
                      "description": "If you want to show shipping options in Qliro Checkout use this section or\nprovide your own shipping by sending us your own shipping methods url in MerchantOrderAvailableShippingMethodsUrl property",
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/ShippingConfiguration"
                        }
                      ]
                    },
                    "MerchantProvidedMetadata": {
                      "type": "array",
                      "description": "Merchant can send promotion and other information which can be retrieved later using GetOrder call if required. Maximum 30 elements allowed in list.",
                      "nullable": true,
                      "items": {
                        "$ref": "#/components/schemas/MerchantProvidedMetadataTag"
                      }
                    },
                    "PickupPersonDetails": {
                      "description": "This property is only relevant to certain merchants. If you are not a merchant who support 3rd party pickup at stores you can ignore this field.",
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PickupPersonData"
                        }
                      ]
                    },
                    "PaymentId": {
                      "type": "string",
                      "description": "This property is used for launching Qliro Checkout with a selected payment method/group.\nThese payment ids can be accessed by POST PaymentOptions request.",
                      "nullable": true,
                      "example": "PAY_LATER"
                    },
                    "MerchantCancelUrl": {
                      "type": "string",
                      "description": "This property is used for creating an Cancel Payment link when opening Qliro Checkout\nas a Payment Link.",
                      "nullable": true,
                      "example": "https://merchant.com/cancel/"
                    }
                  }
                }
              ]
            },
            "CustomerInformation3": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PersonalNumber": {
                  "type": "string",
                  "description": "A national identification number to identify the customer.",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": "111111-1111"
                },
                "VatNumber": {
                  "type": "string",
                  "description": "A VAT number of the customer.",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": "SE111111111101"
                },
                "Email": {
                  "type": "string",
                  "description": "The customer's email address",
                  "maxLength": 255,
                  "minLength": 0,
                  "nullable": true,
                  "example": "email@domain.com"
                },
                "JuridicalType": {
                  "type": "string",
                  "description": "'Physical' or 'Company'. If 'Company', the PersonalNumber field will be interpreted as an organization number.",
                  "nullable": true,
                  "example": "Physical"
                },
                "MobileNumber": {
                  "type": "string",
                  "description": "The customer's mobile number",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": 46101010101
                },
                "DateOfBirth": {
                  "type": "string",
                  "description": "The customer's date of birth. Can provide if PersonalNumber is null and JuridicalType is Physical.",
                  "format": "date-time",
                  "nullable": true
                },
                "Address": {
                  "description": "The customer's address. If provided and complete, the address will be presented as an alternative to the address fetched by Qliro Checkout. For B2B customer treat this address as billing address",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Address"
                    }
                  ]
                },
                "ShippingAddress": {
                  "description": "The customer's shipping address for B2B customer. If provided and complete, the address will be presented as B2B customer shipping address.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Address"
                    }
                  ]
                },
                "LockCustomerInformation": {
                  "type": "boolean",
                  "description": "If true, Qliro Checkout will prioritize the provided address over the customer's registered one. Qliro Checkout will also prevent the customer from changing address, email or phone number inside Qliro Checkout. This can lead to Qliro payment methods being disabled, since some methods require the registered address.",
                  "nullable": true,
                  "example": true
                },
                "LockCustomerEmail": {
                  "type": "boolean",
                  "description": "If true, Qliro Checkout will prevent the customer from changing their email inside Qliro Checkout. If no valid email is provided, this flag will be ignored.",
                  "nullable": true,
                  "example": false
                },
                "LockCustomerMobileNumber": {
                  "type": "boolean",
                  "description": "If true, Qliro Checkout will prevent the customer from changing their mobile number inside Qliro Checkout. If no valid mobile number is provided, this flag will be ignored.",
                  "nullable": true,
                  "example": false
                },
                "LockCustomerPersonalNumber": {
                  "type": "boolean",
                  "description": "If true, Qliro Checkout will prevent the customer from changing their personal number or organization number inside Qliro Checkout. If no valid personal number or organization number is provided, this flag will be ignored.",
                  "nullable": true,
                  "example": false
                },
                "LockCustomerAddress": {
                  "type": "boolean",
                  "description": "If true, Qliro Checkout will prevent the customer from changing their address inside Qliro Checkout. If no valid address is provided, this flag will be ignored.",
                  "nullable": true,
                  "example": false
                }
              }
            },
            "AvailableShippingMethod": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "MerchantReference",
                "DisplayName"
              ],
              "properties": {
                "MerchantReference": {
                  "type": "string",
                  "description": "A string generated by the merchant to identify the shipping method uniquely. Maximum length is 450 characters.",
                  "maxLength": 450,
                  "minLength": 0,
                  "example": "HOME_DELIVERY"
                },
                "ShippingFeeMerchantReference": {
                  "type": "string",
                  "description": "When the customer chooses a shipping method in Qliro Checkout, an order item will be added to the cart, including the shipping fee for that particular shipping method. By default, the merchantReference of this fee item will be copied from the selected shipping option. If the ShippingFeeMerchantReference parameter is provided, the merchantReference will be overridden. Maximum length is 450 characters.",
                  "maxLength": 450,
                  "minLength": 0,
                  "nullable": true,
                  "example": "SHIPPING_FEE_REF_1"
                },
                "DisplayName": {
                  "type": "string",
                  "description": "The name of the shipping method, presented to the customer.",
                  "maxLength": 100,
                  "minLength": 0,
                  "example": "Home Deliver"
                },
                "Descriptions": {
                  "type": "array",
                  "description": "An array of (String) descriptions, presented as extra lines of information to the customer. Maximum length is 200 characters per line and up to 3 lines.",
                  "nullable": true,
                  "example": "\"Expected date\",\"Expected time\"",
                  "items": {
                    "type": "string"
                  }
                },
                "Brand": {
                  "type": "string",
                  "description": "A brand connected to the shipping method. If supported by Qliro Checkout, a logotype will be shown in the shipping methods list.",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": "DHL"
                },
                "PriceIncVat": {
                  "type": "number",
                  "description": "The price including Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99, 99.9 or 99.99.",
                  "format": "decimal",
                  "example": 300
                },
                "PriceExVat": {
                  "type": "number",
                  "description": "The price excluding Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99, 99.9 or 99.99.",
                  "format": "decimal",
                  "example": 200
                },
                "OriginalPrice": {
                  "type": "number",
                  "description": "Use when updating the price of a shippingOption if the old price should be displayed, e.g. to point out shipping was made free because of total price over a certain value.",
                  "format": "decimal",
                  "nullable": true
                },
                "SupportsAccessCode": {
                  "type": "boolean",
                  "description": "If provided and true, a field will be presented so that the customer can enter an access code. The access code will be optional and have maximum 50 characters. Suitable for home delivery methods."
                },
                "SupportsDynamicSecondaryOptions": {
                  "type": "boolean",
                  "description": "If provided and true, a request to MerchantOrderAvailableShippingMethodsUrl will be sent every time the customer clicks on this shipping option. If MerchantOrderAvailableShippingMethodsUrl is not provided, selected shipping option will not be updated with secondary options list.",
                  "example": true
                },
                "SecondaryOptions": {
                  "type": "array",
                  "description": "An array of additional options of the shipping method. See details below.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AvailableShippingSecondaryOption"
                  }
                },
                "AdditionalShippingServices": {
                  "type": "array",
                  "description": "Use when additional shipping services are available for the shipping option.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdditionalShippingService"
                  }
                },
                "DeliveryDate": {
                  "type": "string",
                  "description": "This field represent the estimated delivery date of the order. If the date provided is older than today the value will be ignored.",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2099-01-01"
                },
                "CategoryDisplayName": {
                  "type": "string",
                  "description": "Can be used to group shipping methods. If used it must be set on all included shipping methods. Only 2 category values can be used for a list of shipping methods. Recommended values to use are \"HOME_DELIVERY\" and \"PICKUP\" so Qliro Checkout can handle the localizations. Other values will be used as is. Maximum length is 50 characters.",
                  "nullable": true,
                  "example": "HOME_DELIVERY"
                },
                "LabelDisplayName": {
                  "type": "string",
                  "description": "To be used with categories. Only use 3 or less different labels for all shipping options. Recommended values: \"Express\", \"Free\" and \"Economy\". Maximum length is 50 characters.",
                  "nullable": true,
                  "example": "Name"
                },
                "DeliveryDateInfo": {
                  "description": "Use to provide information about delivery date.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DeliveryDateInfo"
                    }
                  ]
                },
                "IsEcoFriendly": {
                  "type": "boolean",
                  "description": "Use to mark a shipping method as eco friendly."
                },
                "OptionLabels": {
                  "type": "array",
                  "description": "Use to mark a shipping method with labels.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/OptionLabel"
                  }
                }
              }
            },
            "AvailableShippingSecondaryOption": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "MerchantReference",
                "DisplayName"
              ],
              "properties": {
                "MerchantReference": {
                  "type": "string",
                  "description": "A string generated by the merchant to identify the Shipping option.",
                  "maxLength": 450,
                  "minLength": 0,
                  "example": "UniqueMerchantReference"
                },
                "DisplayName": {
                  "type": "string",
                  "description": "User friendly title of the Shipping option",
                  "maxLength": 100,
                  "minLength": 0,
                  "example": "Pickup location 1"
                },
                "City": {
                  "type": "string",
                  "description": "Use to provide city of delivery",
                  "maxLength": 450,
                  "minLength": 0,
                  "nullable": true,
                  "example": "Stockholm"
                },
                "Address": {
                  "type": "string",
                  "description": "Use to provide address of delivery",
                  "maxLength": 450,
                  "minLength": 0,
                  "nullable": true,
                  "example": "Street 24"
                },
                "PostalCode": {
                  "type": "string",
                  "description": "Use to provide postal code of delivery",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true,
                  "example": 10316
                },
                "Descriptions": {
                  "type": "array",
                  "description": "User friendly description of the Shipping option",
                  "nullable": true,
                  "example": "\"Address\", \"Hours\"",
                  "items": {
                    "type": "string"
                  }
                },
                "Coordinates": {
                  "description": "Use to provide Geographical location of delivery.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GeoCoordinate"
                    }
                  ]
                },
                "DeliveryDateInfo": {
                  "description": "Use to provide information about delivery date.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DeliveryDateInfo"
                    }
                  ]
                }
              }
            },
            "GeoCoordinate": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Lat": {
                  "type": "number",
                  "description": "Latitude expressed as decimal",
                  "format": "double",
                  "nullable": true,
                  "example": 59.349962
                },
                "Lng": {
                  "type": "number",
                  "description": "Longitude expressed as decimal",
                  "format": "double",
                  "nullable": true,
                  "example": 18.04763
                }
              }
            },
            "DeliveryDateInfo": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "DateStart": {
                  "type": "string",
                  "description": "This field represent the estimated delivery start date of the order. If the date provided is older than today the value will be ignored.\nIf no time offset is sent on the date, date will assume UTC\nIf time offset different than UTC is sent on the date, date be converted to UTC",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2099-01-01"
                },
                "DateEnd": {
                  "type": "string",
                  "description": "This field represent the estimated delivery end date of the order. If the date provided is older than today the value will be ignored.\nIf no time offset is sent on the date, date will assume UTC\nIf time offset different than UTC is sent on the date, date be converted to UTC",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2099-01-01"
                },
                "Unit": {
                  "description": "This field represent the display type for the delivery date. If no unit is provided a default of date will be used.",
                  "nullable": true,
                  "example": "Date",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DeliveryDateUnit"
                    }
                  ]
                }
              }
            },
            "DeliveryDateUnit": {
              "type": "integer",
              "description": "",
              "x-enumNames": [
                "Date",
                "DateTime",
                "Workdays"
              ],
              "enum": [
                0,
                1,
                2
              ]
            },
            "AdditionalShippingService": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "MerchantReference",
                "DisplayName"
              ],
              "properties": {
                "MerchantReference": {
                  "type": "string",
                  "description": "A string generated by the merchant to identify the additional shipping service uniquely. Maximum length is 200 characters.",
                  "maxLength": 450,
                  "minLength": 0,
                  "example": "ADDITIONAL_SHIPPING_SERVICE_1"
                },
                "DisplayName": {
                  "type": "string",
                  "description": "The name of the additional shipping service, presented to the customer.",
                  "maxLength": 100,
                  "minLength": 0,
                  "example": "Express delivery"
                },
                "Descriptions": {
                  "type": "array",
                  "description": "An array of (String) descriptions, presented as extra lines of information to the customer. Maximum length is 100 characters per line and up to 3 lines.",
                  "nullable": true,
                  "example": "Faster delivery",
                  "items": {
                    "type": "string"
                  }
                },
                "PriceExVat": {
                  "type": "number",
                  "description": "The price excluding Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99, 99.9 or 99.99.",
                  "format": "decimal",
                  "example": 100
                },
                "PriceIncVat": {
                  "type": "number",
                  "description": "The price including Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99, 99.9 or 99.99.",
                  "format": "decimal",
                  "example": 150
                },
                "DeliveryDate": {
                  "type": "string",
                  "description": "This field represent the estimated delivery date of the order, with this selected. Will override the delivery date on Shipping Option",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2099-01-01"
                },
                "DeliveryDateInfo": {
                  "description": "Use to provide information about delivery date.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DeliveryDateInfo"
                    }
                  ]
                }
              }
            },
            "OptionLabel": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "Name"
              ],
              "properties": {
                "Name": {
                  "type": "string",
                  "description": "The name of the shipping option label, presented to the customer.",
                  "maxLength": 50,
                  "minLength": 0,
                  "example": "Morning"
                },
                "DisplayType": {
                  "type": "string",
                  "description": "The Display Type of the shipping option label, presented to the customer.",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": "icon-text"
                }
              }
            },
            "MerchantProvidedQuestionContainer": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Text": {
                  "type": "string",
                  "nullable": true
                },
                "Checked": {
                  "type": "boolean"
                }
              }
            },
            "ApplicableFeeContainer": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Fees": {
                  "type": "object",
                  "description": "A Dictionary of string and Array of Fees, the key should be the name of a PaymentMethod for which the Array of Fees is applicable",
                  "nullable": true,
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PaymentMethodFee"
                    }
                  }
                }
              }
            },
            "PaymentMethodFee": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "Type",
                "MerchantReference",
                "AmountIncludingVat",
                "AmountExcludingVat"
              ],
              "properties": {
                "Type": {
                  "type": "string",
                  "description": "The type of Fee",
                  "minLength": 1,
                  "example": "InvoiceFee"
                },
                "MerchantReference": {
                  "type": "string",
                  "description": "A string generated by the merchant to identify the Fee.",
                  "minLength": 1,
                  "pattern": "^[\\p{L}\\s(.)'\\-_&,\\/–+0-9:]{1,200}$",
                  "example": "MerchantReference"
                },
                "AmountIncludingVat": {
                  "type": "number",
                  "description": "The price per item excluding Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99, 99.9 or 99.99.",
                  "format": "decimal",
                  "example": 100
                },
                "AmountExcludingVat": {
                  "type": "number",
                  "description": "The price per item including Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99, 99.9 or 99.99.",
                  "format": "decimal",
                  "example": 80
                },
                "Description": {
                  "type": "string",
                  "description": "User friendly description of the fee",
                  "maxLength": 4000,
                  "nullable": true,
                  "example": "invoice fee"
                }
              }
            },
            "ShippingConfiguration": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Unifaun": {
                  "description": "If you already have integration with unifaun fill in the Unifaun section and contact merchant onboarding to enable the feature",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Unifaun"
                    }
                  ]
                }
              }
            },
            "Unifaun": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "CheckoutId": {
                  "type": "string",
                  "description": "Checkout id of the unifaun checkout that was created with qliro's template",
                  "nullable": true
                },
                "Tags": {
                  "type": "object",
                  "description": "Upto 20 tags are allowed. Max length for tag key is 20 letters and for tag value it is 30 letters\nNote we already send tocountry, tozipcode, language, currency parameters to unifaun. So merchant doesn't need to send them in tags",
                  "nullable": true,
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "PickupPersonData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "FirstName": {
                  "type": "string",
                  "description": "Pickup person's first name",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true,
                  "example": "First"
                },
                "LastName": {
                  "type": "string",
                  "description": "Pickup person's last name",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true,
                  "example": "Last"
                },
                "Mobile": {
                  "type": "string",
                  "description": "Pickup person's phone number in international format",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": "+46732244555"
                },
                "Email": {
                  "type": "string",
                  "description": "Pickup person's email",
                  "maxLength": 255,
                  "minLength": 0,
                  "nullable": true,
                  "example": "pickuppersonemail@domain.com"
                }
              }
            },
            "UpdateOrderRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "OrderItems"
                  ],
                  "properties": {
                    "OrderItems": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrderItem"
                      }
                    },
                    "AvailableShippingMethods": {
                      "type": "array",
                      "nullable": true,
                      "items": {
                        "$ref": "#/components/schemas/AvailableShippingMethod"
                      }
                    },
                    "RequireIdentityVerification": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "ShippingAdditionalHeader": {
                      "type": "string",
                      "maxLength": 300,
                      "nullable": true
                    },
                    "ApplicableFees": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/ApplicableFeeContainer"
                        }
                      ]
                    },
                    "ShippingConfiguration": {
                      "description": "If you send shipping configs in update call checkoutId and tags that was sent in create order call will be overwritten\nSo make sure to send the checkoutId and all the tags you need or just skip this if Shipping configurations has not changed",
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/ShippingConfiguration"
                        }
                      ]
                    },
                    "MerchantProvidedMetadata": {
                      "type": "array",
                      "description": "Merchant can send promotion and other information which can be retrieved later using GetOrder call if required. Maximum 30 elements allowed in list.",
                      "nullable": true,
                      "items": {
                        "$ref": "#/components/schemas/MerchantProvidedMetadataTag"
                      }
                    },
                    "PickupPersonDetails": {
                      "description": "If you send a non empty object, PickupPersonDetails that was sent in create order call will be overwritten.\nYou can skip this if 3rd party pickup person has not changed.",
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PickupPersonData"
                        }
                      ]
                    },
                    "MerchantConstraintName": {
                      "type": "string",
                      "description": "Enables dynamic filtering of payment channels available in specific orders.",
                      "nullable": true,
                      "example": "CUSTOM_RULE"
                    },
                    "MerchantUpdateVersion": {
                      "type": "string",
                      "description": "Merchants cart version. Will be returned by front end api callback onOrderUpdated when data saved is shown in the checkout",
                      "maxLength": 36,
                      "minLength": 1,
                      "nullable": true,
                      "example": "f00f5776-58a7-45b4-981d-c523a5e271f2"
                    },
                    "PaymentId": {
                      "type": "string",
                      "nullable": true
                    },
                    "CustomerInformation": {
                      "description": "Customer information used to try to identify the customer without user interaction.",
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/CustomerInformation4"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "CustomerInformation4": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Email": {
                  "type": "string",
                  "description": "The customer's email address",
                  "maxLength": 255,
                  "minLength": 0,
                  "nullable": true,
                  "example": "email@domain.com"
                },
                "Address": {
                  "description": "The customer's address. If provided and complete, the address will be presented as an alternative to the address fetched by Qliro Checkout. For B2B customer treat this address as billing address",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Address3"
                    }
                  ]
                }
              }
            },
            "Address3": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PostalCode": {
                  "type": "string",
                  "description": "The postal code of the address.",
                  "maxLength": 15,
                  "minLength": 0,
                  "nullable": true,
                  "example": 12345
                }
              }
            },
            "GetOrderResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetOrderResponseBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "OrderHtmlSnippet": {
                      "type": "string",
                      "description": "HTML snippet used to deploy the Qliro Checkout frontend application.",
                      "nullable": true
                    },
                    "Upsell": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UpsellProperties"
                        }
                      ]
                    },
                    "MerchantSavedCreditCard": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/MerchantSavedCreditCard"
                        }
                      ]
                    },
                    "MerchantProvidedQuestionAnswer": {
                      "type": "boolean",
                      "nullable": true,
                      "example": "True"
                    },
                    "PaymentLink": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                }
              ]
            },
            "UpsellProperties": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "IsUpsellOrder": {
                  "type": "boolean",
                  "example": false
                },
                "EligibleForUpsell": {
                  "type": "boolean",
                  "example": true
                },
                "UpsellTotalPrice": {
                  "type": "number",
                  "format": "decimal",
                  "example": 433.44
                },
                "EligibleForUpsellUntil": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2022-10-10"
                }
              }
            },
            "MerchantSavedCreditCard": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Id": {
                  "type": "string",
                  "format": "guid",
                  "example": "3d2092a6-7baf-49e3-bd34-d0d0d85744b5"
                },
                "BrandName": {
                  "example": "VISA",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CreditCardBrandName"
                    }
                  ]
                },
                "ExpiryYear": {
                  "type": "integer",
                  "format": "int32",
                  "example": 24
                },
                "ExpiryMonth": {
                  "type": "integer",
                  "format": "int32",
                  "example": 12
                },
                "Bin": {
                  "type": "string",
                  "nullable": true,
                  "example": 346596
                },
                "Last4Digits": {
                  "type": "string",
                  "nullable": true,
                  "example": 1234
                },
                "MaskedNumber": {
                  "type": "string",
                  "nullable": true,
                  "example": "346596XXXXXX1234"
                }
              }
            },
            "CreditCardBrandName": {
              "type": "integer",
              "description": "",
              "x-enumNames": [
                "UNKNOWN",
                "VISA",
                "MASTERCARD",
                "AMEX"
              ],
              "enum": [
                0,
                1,
                2,
                3
              ]
            },
            "GetPaymentOptionsRequest": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Currency": {
                  "type": "string",
                  "nullable": true
                },
                "Country": {
                  "type": "string",
                  "nullable": true
                },
                "Language": {
                  "type": "string",
                  "nullable": true
                },
                "TotalPrice": {
                  "type": "number",
                  "format": "decimal"
                },
                "HasRiskItems": {
                  "type": "boolean"
                },
                "MerchantConstraintName": {
                  "type": "string",
                  "nullable": true
                },
                "NumberOfItems": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": true
                },
                "HasSubscriptionItems": {
                  "type": "boolean",
                  "nullable": true
                }
              }
            },
            "CreatePaymentWidgetOrderRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "MerchantReference",
                    "Currency",
                    "Country",
                    "Language",
                    "OrderItems"
                  ],
                  "properties": {
                    "MerchantReference": {
                      "type": "string",
                      "description": "A string generated by the merchant to identify the order uniquely in their system. Maximum length is 25 characters.",
                      "minLength": 1,
                      "pattern": "^[A-Za-z0-9_-]{1,25}$",
                      "example": "MerchantUniqueReference"
                    },
                    "Currency": {
                      "type": "string",
                      "description": "Three uppercase characters, in accordance with ISO 4217.",
                      "minLength": 1,
                      "example": "SEK"
                    },
                    "Country": {
                      "type": "string",
                      "description": "Two upper case characters. In accordance with ISO 3166-1.",
                      "minLength": 1,
                      "example": "SE"
                    },
                    "Language": {
                      "type": "string",
                      "description": "Locale indicative for language & other location-specific details.",
                      "minLength": 1,
                      "example": "sv-se"
                    },
                    "MerchantOrderValidationUrl": {
                      "type": "string",
                      "description": "If specified, Qliro will use this URL to try to validate the order before completing the purchase. Info about authentication for this request can be found below. Should use https.",
                      "nullable": true,
                      "example": "https://merchant.com/orderValidation/"
                    },
                    "MerchantOrderManagementStatusPushUrl": {
                      "type": "string",
                      "description": "Qliro will use this URL to send notifications on payment status changes during the order management process, for example when the payment created by MarkItemsAsShipped call becomes successful. Info about authentication for this request can be found below. Should use https.",
                      "nullable": true,
                      "example": "https://ordermanagement.merchant.com/checkoutstatus"
                    },
                    "MerchantCheckoutStatusPushUrl": {
                      "type": "string",
                      "description": "Qliro will use this URL to send customer checkout status updates. For example when the checkout status switches from OnHold to Completed. Info about authentication for this request can be found below. Should use https.",
                      "nullable": true,
                      "example": "https://ordermanagement.merchant.com/checkoutstatus"
                    },
                    "OrderItems": {
                      "type": "array",
                      "description": "List of items customer added to the cart. ",
                      "items": {
                        "$ref": "#/components/schemas/OrderItem"
                      }
                    },
                    "RequireIdentityVerification": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "ApplicableFees": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/ApplicableFeeContainer"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "GetPaymentWidgetOrderResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "OrderId": {
                  "type": "integer",
                  "description": "Qliro Checkout order id.",
                  "format": "int64",
                  "example": 12345
                },
                "MerchantReference": {
                  "type": "string",
                  "description": "A string generated by the merchant to identify the order uniquely in their system. Maximum length is 25 characters.",
                  "nullable": true,
                  "example": "MerchantUniqueReference"
                },
                "TotalPrice": {
                  "type": "number",
                  "format": "decimal",
                  "example": 1576.65
                },
                "Currency": {
                  "type": "string",
                  "nullable": true,
                  "example": "SEK"
                },
                "Country": {
                  "type": "string",
                  "nullable": true,
                  "example": "SE"
                },
                "Language": {
                  "type": "string",
                  "nullable": true,
                  "example": "sv-se"
                },
                "CustomerCheckoutStatus": {
                  "type": "string",
                  "nullable": true,
                  "example": "Success"
                },
                "Customer": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Customer"
                    }
                  ]
                },
                "BillingAddress": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Address2"
                    }
                  ]
                },
                "ShippingAddress": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Address2"
                    }
                  ]
                },
                "OrderItems": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/OrderItem2"
                  }
                },
                "PaymentMethod": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PaymentMethod"
                    }
                  ]
                },
                "BootstrapUrl": {
                  "type": "string",
                  "nullable": true
                },
                "Widgets": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "InitData": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InitDataContainer"
                    }
                  ]
                }
              }
            },
            "InitDataContainer": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "AuthenticationHeader": {
                  "type": "string",
                  "nullable": true
                },
                "OrderId": {
                  "type": "integer",
                  "format": "int64"
                },
                "WebApiUrl": {
                  "type": "string",
                  "nullable": true
                },
                "WebAppUrl": {
                  "type": "string",
                  "nullable": true
                },
                "Language": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "UpsellOrderResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PaymentTransactionId": {
                  "type": "integer",
                  "description": "Newly created payment transaction id. ",
                  "format": "int64",
                  "example": 123
                },
                "Status": {
                  "type": "string",
                  "description": "Newly created payment transaction status. ",
                  "nullable": true,
                  "example": "Created"
                }
              }
            },
            "UpsellOrderRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "OrderId",
                    "Currency",
                    "OrderItems"
                  ],
                  "properties": {
                    "RequestId": {
                      "type": "string",
                      "description": "Unique request id.",
                      "format": "guid",
                      "example": "d7da92f4-1ad9-48c3-9cd3-26559c98e64c"
                    },
                    "OrderId": {
                      "type": "integer",
                      "description": "Qliro Checkout order Id of an already completed order.",
                      "format": "int64",
                      "example": 12345
                    },
                    "Currency": {
                      "type": "string",
                      "description": "Three uppercase characters, in accordance with ISO 4217. ",
                      "minLength": 1,
                      "example": "SEK"
                    },
                    "OrderItems": {
                      "type": "array",
                      "description": "List of order items to be added to an existing completed order ",
                      "items": {
                        "$ref": "#/components/schemas/OrderItemData"
                      }
                    }
                  }
                }
              ]
            },
            "OrderItemData": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "MerchantReference",
                "Type",
                "Quantity",
                "PricePerItemIncVat",
                "PricePerItemExVat"
              ],
              "properties": {
                "MerchantReference": {
                  "type": "string",
                  "description": "A string generated by the merchant to identify the order item. The combination of MerchantReference and Price Per Item Including Vat is used to uniquely identify the order item. Maximum length is 200 characters.",
                  "minLength": 1,
                  "pattern": "^[\\p{L}\\s(.)'\\-_&,\\/–+0-9:]{1,200}$",
                  "example": "BlackHat"
                },
                "Description": {
                  "type": "string",
                  "description": "A name or description of the order item.",
                  "maxLength": 4000,
                  "nullable": true,
                  "example": "Original product"
                },
                "Type": {
                  "type": "string",
                  "description": "An order item type can be 'Product', 'Discount', 'Fee' or 'Shipping'.",
                  "minLength": 1,
                  "example": "Product"
                },
                "Quantity": {
                  "type": "integer",
                  "description": "The quantity of item(s) and least quantity is 1.  ",
                  "format": "int32",
                  "maximum": 2147483647,
                  "minimum": 1,
                  "example": 95
                },
                "PricePerItemIncVat": {
                  "type": "number",
                  "description": "The price per item including Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99 or 99.9 or 99.99.",
                  "format": "decimal",
                  "example": 143
                },
                "PricePerItemExVat": {
                  "type": "number",
                  "description": "The price per item excluding Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99 or 99.9 or 99.99.",
                  "format": "decimal",
                  "example": 100
                }
              }
            },
            "ResponseModel": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "NullableEnum": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DayOfWeek"
                    }
                  ]
                },
                "EnumAsString": {
                  "$ref": "#/components/schemas/DayOfWeek"
                },
                "DecimalWithPrecision2": {
                  "type": "number",
                  "format": "decimal"
                },
                "PascalCasedString": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "DayOfWeek": {
              "type": "integer",
              "description": "",
              "x-enumNames": [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ],
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ]
            },
            "RequestModel": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PropertyShouldNotBeAbc": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "adminJson": {
        "x-generator": "NSwag v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))",
        "openapi": "3.0.0",
        "info": {
          "title": "Qliro.Payments.AdminApi API",
          "version": "v2"
        },
        "servers": [
          {
            "url": "https://pago.qit.nu/checkout/adminapi"
          }
        ],
        "paths": {
          "/v2/AddItemsToInvoice": {
            "post": {
              "tags": [
                "Orders"
              ],
              "summary": "Add order items",
              "description": "For Qliro payment methods, order items can be added to an invoice even after it has been activated. The total increase of the invoice amount is limited.",
              "operationId": "AddItemsToInvoice",
              "requestBody": {
                "x-name": "addItemsToInvoiceRequest",
                "description": "Request to add order items to existing purchase.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AdminApiV2ModelsAddItemsToInvoiceRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "200": {
                  "description": "This only indicates that the request was successfully received by the Admin API. The actual status of the operation will be sent in a notification with the corresponding PaymentTransactionId.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CoreCommonHandlersCommandAddItemsToInvoiceAddItemsToInvoiceResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more information.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/cancelOrder": {
            "post": {
              "tags": [
                "Orders"
              ],
              "summary": "Cancel order",
              "description": "Orders that still have a reserved amount and items that are not yet marked as shipped can be cancelled.\n            Note: Cancelling an order with the TRUSTLY payment method, results in an additional refund transaction.",
              "operationId": "CancelOrder",
              "requestBody": {
                "x-name": "cancelModificationRequest",
                "description": "Request to cancel full order or partial order",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AdminApiV2ModelsCancelOrderRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "200": {
                  "description": "This only indicates that the request was successfully received by the Admin API. The actual status of the operation will be sent in a notification with the corresponding PaymentTransactionId.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CoreCommonHandlersCommandCancelOrderCancelOrderResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more information.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/MarkItemsAsShipped": {
            "post": {
              "tags": [
                "Orders"
              ],
              "summary": "Captures an order",
              "description": "This call is used to mark order items as shipped. For most payment methods, this will lead to a Capture or Activation and a money transfer.",
              "operationId": "MarkItemsAsShipped",
              "requestBody": {
                "x-name": "markItemsAsShippedRequest",
                "description": "Request to capture an order",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AdminApiV2ModelsMarkItemsAsShippedRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "200": {
                  "description": "This only indicates that the request was successfully received by the Admin API. The actual status of the operation will be sent in a notification with the corresponding PaymentTransactionId.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CoreCommonParametersMarkItemsAsShippedResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more information.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/orders/{id}": {
            "get": {
              "tags": [
                "Orders"
              ],
              "summary": "Gets order details",
              "description": "This call can be used to get detailed information about the order.",
              "operationId": "Orders",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "QliroOne order ID",
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "x-position": 1
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryOrdersGetOrderResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more information.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Order not found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/orders/{merchantReference}": {
            "get": {
              "tags": [
                "Orders"
              ],
              "summary": "Gets order details",
              "description": "This call can be used to get detailed information about the order.",
              "operationId": "Orders2",
              "parameters": [
                {
                  "name": "merchantReference",
                  "in": "path",
                  "required": true,
                  "description": "Order merchant reference.",
                  "schema": {
                    "type": "string"
                  },
                  "x-position": 1
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryOrdersGetOrderResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more information.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Order not found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/ReturnItems": {
            "post": {
              "tags": [
                "Orders"
              ],
              "summary": "Returns with items",
              "description": "Return items of an order and initiate a refund.",
              "operationId": "ReturnWithItems",
              "requestBody": {
                "x-name": "returnItemsRequest",
                "description": "Request to return order items",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AdminApiV2ModelsReturnItemsRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "200": {
                  "description": "This only indicates that the request was successfully received by the Admin API. The actual status of the operation will be sent in a notification with the corresponding PaymentTransactionId.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CoreCommonHandlersCommandReturnItemsCommonReturnItemsResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more information.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/UpdateItems": {
            "post": {
              "tags": [
                "Orders"
              ],
              "summary": "Updates items",
              "description": "For Qliro payment methods: Orders that have not been cancelled and that have at least one item that has not been marked as shipped, can be updated. Increasing the previously reserved amount could trigger a credit check, possibly resulting in a declined request. Multiple items with the same signature (MerchantReference + PricePerItemIncVat) but different PricePerItemExVat are not allowed. Changes in PricePerItemExVat should be sent as a new item. It is also not allowed to update PricePerItemExVat or Description of an item if that item is already fully or partially shipped with a different PricePerItemExVat or Description.\nFor non Qliro payment methods: Orders that have not been cancelled and that have no items marked as shipped can be updated.If at least one item on the order has been marked as shipped, update items can no longer be used for that order.\nNote: Updating an order with the TRUSTLY payment method may result in additional transactions.\nNote: The OrderItems list will replace the previous list of order items, so if you want to remove one item from the order, send all other items in the UpdateItems request.",
              "operationId": "UpdateItems",
              "requestBody": {
                "x-name": "updateItemsRequest",
                "description": "Request to update order items",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AdminApiV2ModelsUpdateItemsRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "200": {
                  "description": "This only indicates that the request was successfully received by the Admin API. The actual status of the operation will be sent in a notification with the corresponding PaymentTransactionId. <br/><br/>If update items was done on an order with the TRUSTLY payment method and the order amount changed, an extra reversal transaction will be performed. Status for the reversal transaction will be notified as a normal transaction through Order Management Status. If the reversal transaction fails it can be retried using the Retry Reversal Payment request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CoreCommonHandlersCommandUpdateItemsCommonUpdateItemsResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more information.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/updatemerchantreference": {
            "post": {
              "tags": [
                "Orders"
              ],
              "summary": "Updates Merchant Reference",
              "description": "This call can be used to update the MerchantReference of the order.",
              "operationId": "UpdateMerchantReference",
              "requestBody": {
                "x-name": "request",
                "description": "UpdateMerchantReference request",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AdminApiV1ModelsUpdateMerchantReferenceRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "200": {
                  "description": "If the order was paid with a Qliro payment method, a new transaction will be created and the PaymentTransactionId will be in the response. Otherwise the response will just be a 200 OK status code if the update was successful.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCoreV1HandlersModelsUpdateMerchantReferenceResponseBase"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more details.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/retryReversalPaymentTransaction": {
            "post": {
              "tags": [
                "RetryReversalPaymentTransaction"
              ],
              "summary": "Retry reversal payment",
              "description": "Used if a reversal transaction was initiated from an update items call and failed, needing to be retried.",
              "operationId": "RetryReversalPaymentTransaction",
              "requestBody": {
                "x-name": "retryReversalPaymentTransactionRequest",
                "description": "Retry reversal payment transaction request",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AdminApiV1ModelsRetryReversalPaymentTransactionRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "200": {
                  "description": "This only indicates that the request was successfully received by the Admin API. The actual status of the operation will be sent in a notification with the corresponding PaymentTransactionId.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCoreV1HandlersCommandRetryReversalPaymentTransactionRetryReversalPaymentTransactionResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more information.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/orderPushUrl/OrderManagement": {
            "post": {
              "tags": [
                "SetOrderPushUrl"
              ],
              "operationId": "SetOrderManagementPushUrlRequest",
              "requestBody": {
                "x-name": "setOrderManagementPushUrlRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AdminApiV2ModelsSetOrderManagementPushUrlRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "200": {
                  "description": "",
                  "content": {
                    "application/octet-stream": {
                      "schema": {
                        "type": "string",
                        "format": "binary"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/paymentTransactions/{id}": {
            "get": {
              "tags": [
                "PaymentTransactions"
              ],
              "summary": "Gets payment transaction",
              "description": "This call can be used to get the status of a specific order management call.",
              "operationId": "PaymentTransactions",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "Payment transaction ID",
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "x-position": 1
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryPaymentTransactionGetPaymentTransactionResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more information.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Not found.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/merchantpayment": {
            "post": {
              "tags": [
                "MerchantPayment"
              ],
              "summary": "Create merchant payment",
              "description": "When it is time to create the recurring order use method MerchantPayment. This call is used to initiate the purchase on behalf of the customer.",
              "operationId": "CreateMerchantPayment",
              "requestBody": {
                "x-name": "createMerchantPaymentRequest",
                "description": "Request to recurring merchant payment",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AdminApiV2ModelsCreateMerchantPaymentRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "200": {
                  "description": "This only indicates that the request was successfully received by the Admin API. The actual status of the operation will be sent in a notification with the corresponding OrderId, PaymentTransactionId.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCoreV2HandlersCommandMerchantPaymentCreateMerchantPaymentResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more information.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/merchantpayment/retry": {
            "post": {
              "tags": [
                "MerchantPayment"
              ],
              "summary": "Retry merchant payment",
              "description": "If a payment for an existing order has failed, it is possible to retry the payment using a different payment method.",
              "operationId": "RetryMerchantPayment",
              "requestBody": {
                "x-name": "retryMerchantPaymentRequest",
                "description": "Request to retry merchant payment",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AdminApiV2ModelsRetryMerchantPaymentRequest"
                    }
                  }
                },
                "required": true,
                "x-position": 1
              },
              "responses": {
                "200": {
                  "description": "This only indicates that the request was successfully received by the Admin API. The actual status of the operation will be sent in a notification with the corresponding OrderId, PaymentTransactionId.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCoreV2HandlersCommandMerchantPaymentRetryMerchantPaymentResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more information.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/merchantpayment/getCustomerAddress": {
            "get": {
              "tags": [
                "MerchantPayment"
              ],
              "summary": "Gets customer address",
              "description": "The endpoint returns an array of addresses, one if the customer is a Physical customer and all known addresses of a Company customer. Qliro only supports Swedish Addresses at this time.",
              "operationId": "GetCustomerAddress",
              "parameters": [
                {
                  "name": "JuridicalType",
                  "in": "query",
                  "description": "'Physical' or 'Company'. If 'Company', the PersonalNumber parameter will be interpreted as an organization number.",
                  "schema": {
                    "type": "string",
                    "nullable": true,
                    "example": "Physical"
                  },
                  "x-position": 1
                },
                {
                  "name": "PersonalNumber",
                  "in": "query",
                  "description": "A national identification number to identify the customer.",
                  "schema": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 0,
                    "nullable": true,
                    "example": "111111-1111"
                  },
                  "x-position": 2
                },
                {
                  "name": "CountryCode",
                  "in": "query",
                  "description": "'SE' or 'NO'. If country code not provided parameter will be interpreted as 'SE'.",
                  "schema": {
                    "type": "string",
                    "nullable": true,
                    "example": "NO"
                  },
                  "x-position": 3
                }
              ],
              "responses": {
                "200": {
                  "description": "This only indicates that the request was successfully received by the Admin API. The actual status of the operation will be sent in a notification with the corresponding OrderId, PaymentTransactionId.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryCustomerAddressGetCustomerAddressResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more information.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/settlements": {
            "get": {
              "tags": [
                "Settlements"
              ],
              "summary": "Gets consolidated settlements",
              "description": "This call can be used to retrieve settlement records for a given period of time. The settlements include all the credit/debit transactions occurred during the period specified.\n            The response will be a list of settlement records.",
              "operationId": "GetSettlements",
              "parameters": [
                {
                  "name": "FromDate",
                  "in": "query",
                  "description": "Date in format yyyy/mm/dd (2017/11/30) from which settlements will be included. Today’s date will result in a PERIOD_NOT_SETTLED error.",
                  "schema": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021/01/15"
                  },
                  "x-position": 1
                },
                {
                  "name": "ToDate",
                  "in": "query",
                  "description": "Date in format yyyy/mm/dd (2017/11/30) to which settlements will be included. If not provided, it will default to yesterdays date.\nThe maximum period allowed is 61 days, exceeding 61 days will result in a PERIOD_INVALID error.",
                  "schema": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "example": "2021/01/17"
                  },
                  "x-position": 2
                },
                {
                  "name": "CountryCode",
                  "in": "query",
                  "description": "Two upper case characters. In accordance with ISO 3166-1. If specified Rejected and Pending settlements will not be included in the response.",
                  "schema": {
                    "type": "string",
                    "nullable": true,
                    "example": "SE"
                  },
                  "x-position": 3
                },
                {
                  "name": "PaymentMethodType",
                  "in": "query",
                  "description": "If specified, the response will only include records for this specific payment method.",
                  "schema": {
                    "type": "string",
                    "nullable": true
                  },
                  "x-position": 4
                },
                {
                  "name": "CurrencyCode",
                  "in": "query",
                  "description": "Three upper case characters, in accordance with ISO 4217.",
                  "schema": {
                    "type": "string",
                    "nullable": true
                  },
                  "x-position": 5
                },
                {
                  "name": "Types",
                  "in": "query",
                  "style": "form",
                  "explode": true,
                  "description": "Array of settlement types Transaction, Fee and Chargeback. Defaults to only using Transaction.",
                  "schema": {
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "string"
                    }
                  },
                  "x-position": 6
                },
                {
                  "name": "BatchId",
                  "in": "query",
                  "description": "ID of the provider batch money transfer.Different payment methods can have the same BatchId",
                  "schema": {
                    "type": "string",
                    "nullable": true
                  },
                  "x-position": 7
                },
                {
                  "name": "SettlementStatuses",
                  "in": "query",
                  "style": "form",
                  "explode": true,
                  "description": "Array of settlement statuses Accepted, Rejected and Pending. Defaults to only using Accepted. Response will only include specified types.",
                  "schema": {
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "$ref": "#/components/schemas/InfrastructureConstantsSettlementSettlementStatus"
                    }
                  },
                  "x-position": 8
                }
              ],
              "responses": {
                "200": {
                  "description": "Includes accepted, pending and rejected settlements",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiV1ModelsGetConsolidatedSettlementsResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/settlements/GetBankTransferBatchDetails": {
            "get": {
              "tags": [
                "Settlements"
              ],
              "summary": "Gets Batch Details",
              "description": "This call can be used to get batch details from bank transfers. The batch details contain three lists of all transaction types (settlements, pending and rejected) and a summary per type.",
              "operationId": "GetBankTransferBatchDetails",
              "parameters": [
                {
                  "name": "FromBatchDate",
                  "in": "query",
                  "description": "Date in format yyyy/mm/dd (2020/12/31) from which batches will be included.",
                  "schema": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021/01/15"
                  },
                  "x-position": 1
                },
                {
                  "name": "ToBatchDate",
                  "in": "query",
                  "description": "Date in format yyyy/mm/dd (2020/12/31) to which batches will be included. Can be a maximum of 60 days from fromBatchDate or PERIOD_LIMIT_EXCEEDED error will be thrown.",
                  "schema": {
                    "type": "string",
                    "format": "date-time",
                    "example": ">2021/01/20"
                  },
                  "x-position": 2
                },
                {
                  "name": "CurrencyCode",
                  "in": "query",
                  "description": "Three upper case characters, in accordance with ISO 4217.",
                  "schema": {
                    "type": "string",
                    "nullable": true,
                    "example": "SEK"
                  },
                  "x-position": 3
                },
                {
                  "name": "PaymentMethodTypes",
                  "in": "query",
                  "style": "form",
                  "explode": true,
                  "description": "Comma-separated list of payment methods. If specified, the response will only include records for these payment methods.",
                  "schema": {
                    "type": "array",
                    "nullable": true,
                    "example": "new[] { \"CREDITCARDS\", \"QLIRO_INVOICE\", \"TRUSTLY\", \"PAYPAL\" }",
                    "items": {
                      "type": "string"
                    }
                  },
                  "x-position": 4
                },
                {
                  "name": "Types",
                  "in": "query",
                  "style": "form",
                  "explode": true,
                  "description": "Comma-separated list of settlement types 'Transaction' and 'Fee'. Defaults to only using 'Transaction'.",
                  "schema": {
                    "type": "array",
                    "nullable": true,
                    "example": "new[] { \"Transaction\", \"Fee\" }",
                    "items": {
                      "type": "string"
                    }
                  },
                  "x-position": 5
                }
              ],
              "responses": {
                "200": {
                  "description": "An arrays of accepted, pending and rejected settlements along with summary of total settlements and total settled amount.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiV1ModelsGetBankTransferBatchDetailsResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more information.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/settlements/GetSettlementsByBatchId": {
            "get": {
              "tags": [
                "Settlements"
              ],
              "summary": "Gets settlements by batch Id",
              "description": "This call can be used to retrieve settlements belonging to a specific Qliro Checkout BatchId",
              "operationId": "GetSettlementsByBatchId",
              "parameters": [
                {
                  "name": "Id",
                  "in": "query",
                  "description": "QliroOne Id to identify the batch we receive from a payment provider.",
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "x-position": 1
                }
              ],
              "responses": {
                "200": {
                  "description": "An arrays of accepted, pending and rejected settlements along with summary of total settlements and total settled amount.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiV2ModelsSettlementsGetSettlementsByBatchIdResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more information.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Batch not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/settlements/GetSettlementBatches": {
            "get": {
              "tags": [
                "Settlements"
              ],
              "summary": "Gets settlement batches",
              "description": "This call can be used to retrieve a list of settlement batches for a given period of time. The settlement batches list will include sums for the transactions that occurred during the period specified. The response will be a list of settlement batches.",
              "operationId": "GetSettlementBatches",
              "parameters": [
                {
                  "name": "FromBatchDate",
                  "in": "query",
                  "description": "Date in format yyyy/mm/dd (2017/11/30) from which settlements will be included. Today’s date will result in a PERIOD_NOT_SETTLED error.",
                  "schema": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true
                  },
                  "x-position": 1
                },
                {
                  "name": "ToBatchDate",
                  "in": "query",
                  "description": "Date in format yyyy/mm/dd (2017/11/30) from which settlements will be included. Today’s date will result in a PERIOD_NOT_SETTLED error.",
                  "schema": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true
                  },
                  "x-position": 2
                },
                {
                  "name": "CurrencyCode",
                  "in": "query",
                  "description": "Three uppercase characters, in accordance with ISO 4217.",
                  "schema": {
                    "type": "string",
                    "nullable": true
                  },
                  "x-position": 3
                },
                {
                  "name": "AcquirerNames",
                  "in": "query",
                  "style": "form",
                  "explode": true,
                  "description": "An array of strings with the AcquirerName (The name of the payment provider from which settlements are expected to be received. For example: Bambora, Nets, Qliro, Trustly, PayPal, etc).",
                  "schema": {
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "string"
                    }
                  },
                  "x-position": 4
                }
              ],
              "responses": {
                "200": {
                  "description": "The response will be a list of settlement batches where each batch consists of sums of the transactions that occurred during the period specified.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiV2ModelsSettlementsGetSettlementBatchesResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "See ErrorCode and ErrorMessage for more information.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                },
                "500": {
                  "description": "System error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AdminApiCommonModelsErrorResponseModel"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "components": {
          "schemas": {
            "CoreCommonHandlersCommandAddItemsToInvoiceAddItemsToInvoiceResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PaymentTransactions": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/CoreCommonParametersNewlyCreatedPayment"
                  }
                }
              }
            },
            "CoreCommonParametersNewlyCreatedPayment": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PaymentTransactionId": {
                  "type": "integer",
                  "format": "int64"
                },
                "Status": {
                  "$ref": "#/components/schemas/InfrastructureConstantsPaymentTransactionStatus"
                }
              }
            },
            "InfrastructureConstantsPaymentTransactionStatus": {
              "type": "integer",
              "description": "",
              "x-enumNames": [
                "Created",
                "InProcess",
                "UserInteractionRequired",
                "OnHold",
                "Success",
                "Error",
                "Cancelled"
              ],
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ]
            },
            "AdminApiCommonModelsErrorResponseModel": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "ErrorCode": {
                  "type": "string",
                  "description": "Unique error code",
                  "nullable": true
                },
                "ErrorMessage": {
                  "type": "string",
                  "description": "Detailed error message",
                  "nullable": true
                },
                "ErrorReference": {
                  "type": "string",
                  "description": "A tracking ID from Qliro Checkout",
                  "format": "guid"
                }
              }
            },
            "AdminApiV2ModelsAddItemsToInvoiceRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsRequestBaseWithCurrency"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "Additions"
                  ],
                  "properties": {
                    "Additions": {
                      "type": "array",
                      "description": "Array of additions to be made to the invoice.",
                      "items": {
                        "$ref": "#/components/schemas/AdminApiV2ModelsAddItemsToInvoiceRequest_Addition"
                      }
                    }
                  }
                }
              ]
            },
            "AdminApiV2ModelsAddItemsToInvoiceRequest_Addition": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "PaymentTransactionId",
                "OrderItems"
              ],
              "properties": {
                "PaymentTransactionId": {
                  "type": "integer",
                  "description": "This ID is a reference to the particular request. Status of the relevant request will be notified with this ID.",
                  "format": "int64",
                  "example": 125425
                },
                "OrderItems": {
                  "type": "array",
                  "description": "Array of items that are to be added to the shipment.",
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV2ModelsAddItemsToInvoiceRequest_OrderItem"
                  }
                }
              }
            },
            "AdminApiV2ModelsAddItemsToInvoiceRequest_OrderItem": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsOrderItemBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "PricePerItemExVat"
                  ],
                  "properties": {
                    "Description": {
                      "type": "string",
                      "description": "A name or description of the order item.",
                      "maxLength": 4000,
                      "nullable": true,
                      "example": "Fancy RedHat from HM"
                    },
                    "PricePerItemExVat": {
                      "type": "number",
                      "description": "The price per item excluding Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99, 99.9 or 99.99. Defaults to 0 if not specified.",
                      "format": "decimal",
                      "example": 300.52
                    }
                  }
                }
              ]
            },
            "AdminApiV2ModelsOrderItemBase": {
              "type": "object",
              "x-abstract": true,
              "additionalProperties": false,
              "required": [
                "MerchantReference",
                "Type",
                "Quantity",
                "PricePerItemIncVat"
              ],
              "properties": {
                "MerchantReference": {
                  "type": "string",
                  "description": "A string generated by the merchant to identify the order item. The combination of MerchantReference and PricePerItemIncVat is used to uniquely identify the order item. Maximum length is 200 characters.",
                  "minLength": 1,
                  "example": "Fancy RedHat from HM"
                },
                "Type": {
                  "type": "string",
                  "description": "Can be 'Product', 'Discount', 'Fee' or 'Shipping'",
                  "minLength": 1,
                  "example": "Product"
                },
                "Quantity": {
                  "type": "integer",
                  "description": "The number of these items that should be added to the cart.",
                  "format": "int32",
                  "maximum": 2147483647,
                  "minimum": 1,
                  "example": 2
                },
                "PricePerItemIncVat": {
                  "type": "number",
                  "description": "The price per item including Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99, 99.9 or 99.99.",
                  "format": "decimal",
                  "example": 375.55
                }
              }
            },
            "AdminApiV2ModelsRequestBaseWithCurrency": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsOrderRequestBase"
                },
                {
                  "type": "object",
                  "x-abstract": true,
                  "additionalProperties": false,
                  "required": [
                    "Currency"
                  ],
                  "properties": {
                    "Currency": {
                      "type": "string",
                      "description": "Three uppercase characters, in accordance with ISO 4217.",
                      "minLength": 1,
                      "example": "SEK"
                    }
                  }
                }
              ]
            },
            "AdminApiV2ModelsOrderRequestBase": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsRequestBase"
                },
                {
                  "type": "object",
                  "x-abstract": true,
                  "additionalProperties": false,
                  "properties": {
                    "OrderId": {
                      "type": "integer",
                      "description": "The Qliro Checkout order ID",
                      "format": "int64",
                      "example": 5452321
                    }
                  }
                }
              ]
            },
            "AdminApiV2ModelsRequestBase": {
              "type": "object",
              "x-abstract": true,
              "additionalProperties": false,
              "required": [
                "MerchantApiKey"
              ],
              "properties": {
                "RequestId": {
                  "type": "string",
                  "description": "A GUID formatted string used to avoid the same request being executed multiple times. The GUID will be stored for 7 days, and during that time, any requests sent with the same GUID will be denied. https://guidgenerator.com/online-guid-generator.aspx",
                  "format": "guid",
                  "example": "d92b8c60-6781-4946-9854-e70b27452d5a"
                },
                "MerchantApiKey": {
                  "type": "string",
                  "description": "Will be provided by Qliro Checkout when setting up merchant account",
                  "maxLength": 50,
                  "minLength": 0,
                  "example": "HATS"
                }
              }
            },
            "CoreCommonHandlersCommandCancelOrderCancelOrderResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PaymentTransactions": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/CoreCommonParametersNewlyCreatedPayment"
                  }
                }
              }
            },
            "AdminApiV2ModelsCancelOrderRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsOrderRequestBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "CoreCommonParametersMarkItemsAsShippedResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PaymentTransactions": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/CoreCommonParametersNewlyCreatedPayment"
                  }
                }
              }
            },
            "AdminApiV2ModelsMarkItemsAsShippedRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsRequestBaseWithCurrency"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "Shipments"
                  ],
                  "properties": {
                    "Shipments": {
                      "type": "array",
                      "description": "Array of each shipment containing the order items and the payment reference.",
                      "items": {
                        "$ref": "#/components/schemas/AdminApiV2ModelsMarkItemsAsShippedRequest_Shipment"
                      }
                    }
                  }
                }
              ]
            },
            "AdminApiV2ModelsMarkItemsAsShippedRequest_Shipment": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "OrderItems"
              ],
              "properties": {
                "PaymentTransactionId": {
                  "type": "integer",
                  "description": "This ID is a reference to the particular request. Status of the relevant request will be notified with this ID.",
                  "format": "int64",
                  "nullable": true,
                  "example": 454211
                },
                "OrderItems": {
                  "type": "array",
                  "description": "Array of items that is included in the shipment.",
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV2ModelsMarkItemsAsShippedRequest_OrderItem"
                  }
                }
              }
            },
            "AdminApiV2ModelsMarkItemsAsShippedRequest_OrderItem": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsOrderItemBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "Metadata": {
                      "description": "Used to display header or footer lines on an invoice.",
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AdminApiV2ModelsMarkItemsAsShippedRequest_MetadataContainer"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "AdminApiV2ModelsMarkItemsAsShippedRequest_MetadataContainer": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "HeaderLines": {
                  "type": "array",
                  "description": "Array of strings that will be displayed above the item on the invoice. Maximum number of strings is 5 and maximum length of each string is 115 characters.",
                  "nullable": true,
                  "items": {
                    "type": "string"
                  }
                },
                "FooterLines": {
                  "type": "array",
                  "description": "Array of strings that will be displayed below the item on the invoice. Maximum number of strings is 5 and maximum length of each string is 115 characters.",
                  "nullable": true,
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "AdminApiCoreV2HandlersCommandMerchantPaymentCreateMerchantPaymentResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "OrderId": {
                  "type": "integer",
                  "format": "int64"
                },
                "PaymentTransactions": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/CoreCommonParametersNewlyCreatedPayment"
                  }
                }
              }
            },
            "AdminApiV2ModelsCreateMerchantPaymentRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsRequestBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "MerchantReference",
                    "Currency",
                    "Country",
                    "Language",
                    "OrderItems",
                    "BillingAddress",
                    "PaymentMethod"
                  ],
                  "properties": {
                    "MerchantReference": {
                      "type": "string",
                      "description": "A string generated by the merchant to identify the order uniquely in their system. Maximum length is 25 characters.",
                      "minLength": 1,
                      "pattern": "^[A-Za-z0-9_-]{1,25}$",
                      "example": "MerchantUniqueReference"
                    },
                    "Currency": {
                      "type": "string",
                      "description": "Three uppercase characters, in accordance with ISO 4217.",
                      "minLength": 1,
                      "example": "SEK"
                    },
                    "Country": {
                      "type": "string",
                      "description": "Two upper case characters. In accordance with ISO 3166-1.",
                      "minLength": 1,
                      "example": "SE"
                    },
                    "Language": {
                      "type": "string",
                      "description": "Locale indicative for language & other location-specific details. ",
                      "minLength": 1,
                      "example": "sv-se"
                    },
                    "MerchantOrderManagementStatusPushUrl": {
                      "type": "string",
                      "description": "Qliro will use this URL to send notifications on payment status changes during the order management process",
                      "nullable": true,
                      "example": "https://merchant.com/merchantordermanagementstatuspushurl/"
                    },
                    "OrderItems": {
                      "type": "array",
                      "description": "Array of items in order.",
                      "items": {
                        "$ref": "#/components/schemas/AdminApiV2ModelsCreateMerchantPaymentRequest_OrderItem"
                      }
                    },
                    "Customer": {
                      "description": "Customer information. Not required for CreditCard payment, required otherwise. ",
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AdminApiV2ModelsCreateMerchantPaymentRequest_CustomerInformation"
                        }
                      ]
                    },
                    "BillingAddress": {
                      "description": "Customer billing address.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AdminApiV2ModelsCreateMerchantPaymentRequest_AddressData"
                        }
                      ]
                    },
                    "ShippingAddress": {
                      "description": "Customer shipping address. If shipping address not provided billing address will be used as shipping address.",
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AdminApiV2ModelsCreateMerchantPaymentRequest_AddressData"
                        }
                      ]
                    },
                    "PaymentMethod": {
                      "description": "Payment method for the specific purchase.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AdminApiV2ModelsCreateMerchantPaymentRequest_PaymentMethodInformation"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "AdminApiV2ModelsCreateMerchantPaymentRequest_OrderItem": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "MerchantReference"
              ],
              "properties": {
                "MerchantReference": {
                  "type": "string",
                  "description": "A string generated by the merchant to identify the order item. The combination of MerchantReference and PricePerItemIncVat is used to uniquely identify the order item. Maximum length is 200 characters.",
                  "minLength": 1,
                  "pattern": "^[\\p{L}\\s(.)'\\-_&,\\/–+0-9:]{1,200}$",
                  "example": "Mobile-Phone"
                },
                "Description": {
                  "type": "string",
                  "description": "A name or description of the order item.",
                  "maxLength": 4000,
                  "nullable": true,
                  "example": "Mobile phone description"
                },
                "Type": {
                  "type": "string",
                  "description": "Can be 'Product', 'Discount', 'Fee' or 'Shipping'",
                  "nullable": true,
                  "example": "Product"
                },
                "Quantity": {
                  "type": "integer",
                  "description": "The number of these items in the cart.",
                  "format": "int32",
                  "maximum": 2147483647,
                  "minimum": 1,
                  "example": 1
                },
                "PricePerItemIncVat": {
                  "type": "number",
                  "description": "The price per item including Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99, 99.9 or 99.99.",
                  "format": "decimal",
                  "example": 2512.25
                },
                "PricePerItemExVat": {
                  "type": "number",
                  "description": "The price per item excluding Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99, 99.9 or 99.99.",
                  "format": "decimal",
                  "example": 1852.52
                }
              }
            },
            "AdminApiV2ModelsCreateMerchantPaymentRequest_CustomerInformation": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PersonalNumber": {
                  "type": "string",
                  "description": "A national identification number to identify the customer. Not required if Physical without personal number, required otherwise. ",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": "111111-1111"
                },
                "VatNumber": {
                  "type": "string",
                  "description": "Value added tax number for 'Company' customers. ",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": "SE111111111101"
                },
                "Email": {
                  "type": "string",
                  "description": "The customer's email address",
                  "maxLength": 255,
                  "minLength": 0,
                  "nullable": true,
                  "example": "email@domain.com"
                },
                "JuridicalType": {
                  "type": "string",
                  "description": "'Physical' or 'Company'. If 'Company', the PersonalNumber parameter will be interpreted as an organization number.",
                  "nullable": true,
                  "example": "Physical"
                },
                "MobileNumber": {
                  "type": "string",
                  "description": "The customer's mobile number. ",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": "+46101010101"
                }
              }
            },
            "AdminApiV2ModelsCreateMerchantPaymentRequest_AddressData": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "FirstName",
                "LastName",
                "Street",
                "PostalCode",
                "City"
              ],
              "properties": {
                "FirstName": {
                  "type": "string",
                  "description": "The first name of a physical customer's address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "example": "John"
                },
                "LastName": {
                  "type": "string",
                  "description": "The Last name of a physical customer's address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "example": "Doe"
                },
                "CompanyName": {
                  "type": "string",
                  "description": "Address holders company name, only applicable for Company Customers.",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true,
                  "example": "Qliro AB"
                },
                "Street": {
                  "type": "string",
                  "description": "The street name and number of the address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "example": "Sveavägen 151"
                },
                "Street2": {
                  "type": "string",
                  "description": "The secondary address line for apartment, suite, department, unit, building, floor etc. Used for company customers and for physical customers in the following countries:\nAustralia, Bosnia and Herzegovina, Canada, Croatia, Cyprus, Czech Rebublic, Estonia, France, Greece, Hungary, Iceland, Ireland, Italy, Lithuania,\nLuxembourg, Macedonia, Malta, Montenegro, Poland, Portugal, Romania, Serbia, Slovakia, Slovenia, Spain, UK, US, Åland.",
                  "maxLength": 40,
                  "minLength": 0,
                  "nullable": true,
                  "example": "lgh 1001"
                },
                "PostalCode": {
                  "type": "string",
                  "description": "The postal code of the address.",
                  "maxLength": 15,
                  "minLength": 0,
                  "example": 17748
                },
                "City": {
                  "type": "string",
                  "description": "The city of the address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "example": "Stockholm"
                },
                "CareOf": {
                  "type": "string",
                  "description": "Used if the addressee doesn't have a standard address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true
                },
                "Area": {
                  "type": "string",
                  "description": "The State/Province/Region of the address. Used in the following countries:\nAustralia, Bosnia and Herzegovina, Canada, Cyprus, Ireland, Italy, Lithuania,Luxembourg, Macedonia, Malta, Montenegro, Romania, US, Åland.",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true,
                  "example": "New York"
                },
                "AreaCode": {
                  "type": "string",
                  "description": "Geographical area code in ISO3166-2 format.",
                  "maxLength": 10,
                  "minLength": 0,
                  "nullable": true,
                  "example": "US-NY"
                }
              }
            },
            "AdminApiV2ModelsCreateMerchantPaymentRequest_PaymentMethodInformation": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "Name"
              ],
              "properties": {
                "Name": {
                  "type": "string",
                  "description": "Can be ‘CREDITCARDS’ , ‘QLIRO_INVOICE’.",
                  "minLength": 1,
                  "example": "CREDITCARDS"
                },
                "Subtype": {
                  "type": "string",
                  "description": "Can be 'INVOICE'. Required only if QLIRO_INVOICE.",
                  "nullable": true
                },
                "SelectedLetterInvoiceOption": {
                  "type": "boolean",
                  "description": "If QLIRO_INVOICE Select True if customers require a letter invoice instead of e-mail. Additional fee may apply to the order. Letter Invoice item with type Fee will be added to the order with price dependent of merchant configuration.",
                  "nullable": true
                },
                "MerchantSavedCreditCardId": {
                  "type": "string",
                  "description": "Required if CREDITCARDS Will be used to identify customer. ",
                  "format": "guid",
                  "nullable": true,
                  "example": "e48c9f7d-0947-44e9-8db2-efdb4b7539e4"
                }
              }
            },
            "AdminApiCoreV2HandlersCommandMerchantPaymentRetryMerchantPaymentResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PaymentTransactions": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/CoreCommonParametersNewlyCreatedPayment"
                  }
                }
              }
            },
            "AdminApiV2ModelsRetryMerchantPaymentRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsRequestBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "PaymentMethod"
                  ],
                  "properties": {
                    "OrderId": {
                      "type": "integer",
                      "description": "Id of the order for which to retry is to be performed.",
                      "format": "int64",
                      "example": 45451215
                    },
                    "PaymentMethod": {
                      "description": "Payment method for the specific purchase.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AdminApiV2ModelsRetryMerchantPaymentRequest_PaymentMethodInformation"
                        }
                      ]
                    },
                    "Customer": {
                      "description": "Customer information.",
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AdminApiV2ModelsRetryMerchantPaymentRequest_CustomerInformation"
                        }
                      ]
                    },
                    "BillingAddress": {
                      "description": "Customer billing address.",
                      "nullable": true,
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AdminApiV2ModelsRetryMerchantPaymentRequest_AddressData"
                        }
                      ]
                    },
                    "Country": {
                      "type": "string",
                      "description": "Two upper case characters. In accordance with ISO 3166-1.",
                      "nullable": true
                    }
                  }
                }
              ]
            },
            "AdminApiV2ModelsRetryMerchantPaymentRequest_PaymentMethodInformation": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "Name"
              ],
              "properties": {
                "Name": {
                  "type": "string",
                  "description": "Can be ‘CREDITCARDS’ , ‘QLIRO_INVOICE’",
                  "minLength": 1,
                  "example": "QLIRO_INVOICE"
                },
                "Subtype": {
                  "type": "string",
                  "description": "Required only if QLIRO_INVOICE. Value is 'INVOICE'.",
                  "nullable": true,
                  "example": "INVOICE"
                },
                "MerchantSavedCreditCardId": {
                  "type": "string",
                  "description": "Required if CREDITCARDS Will be used to identify customer",
                  "format": "guid",
                  "nullable": true
                }
              }
            },
            "AdminApiV2ModelsRetryMerchantPaymentRequest_CustomerInformation": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PersonalNumber": {
                  "type": "string",
                  "description": "A national identification number to identify the customer.",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": "111111-1111"
                },
                "VatNumber": {
                  "type": "string",
                  "description": "Value added tax number for 'Company' customers. ",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": "SE111111111101"
                },
                "Email": {
                  "type": "string",
                  "description": "The customer's email address",
                  "maxLength": 255,
                  "minLength": 0,
                  "nullable": true,
                  "example": "email@domain.com"
                },
                "JuridicalType": {
                  "type": "string",
                  "description": "'Physical' or 'Company'. If 'Company', the PersonalNumber parameter will be interpreted as an organization number.",
                  "nullable": true,
                  "example": "Physical"
                },
                "MobileNumber": {
                  "type": "string",
                  "description": "The customer's mobile number",
                  "maxLength": 50,
                  "minLength": 0,
                  "nullable": true,
                  "example": "+46101010101"
                }
              }
            },
            "AdminApiV2ModelsRetryMerchantPaymentRequest_AddressData": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "FirstName",
                "LastName",
                "Street",
                "PostalCode",
                "City"
              ],
              "properties": {
                "FirstName": {
                  "type": "string",
                  "description": "The first name of a physical customer's address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "example": "First"
                },
                "LastName": {
                  "type": "string",
                  "description": "The last name of a physical customer's address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "example": "Last"
                },
                "CompanyName": {
                  "type": "string",
                  "description": "The name of an organization customer's address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true
                },
                "Street": {
                  "type": "string",
                  "description": "The street name and number of the address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "example": "Street"
                },
                "Street2": {
                  "type": "string",
                  "description": "Additional street information of the address.",
                  "maxLength": 40,
                  "minLength": 0,
                  "nullable": true,
                  "example": "Street 2"
                },
                "PostalCode": {
                  "type": "string",
                  "description": "The postal code of the address.",
                  "maxLength": 15,
                  "minLength": 0,
                  "example": 15452
                },
                "City": {
                  "type": "string",
                  "description": "The city of the address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "example": "Stockholm"
                },
                "CareOf": {
                  "type": "string",
                  "description": "Used if the addressee doesn't have a standard address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true
                },
                "Area": {
                  "type": "string",
                  "description": "The Area of the address.",
                  "maxLength": 100,
                  "minLength": 0,
                  "nullable": true,
                  "example": "Area"
                },
                "AreaCode": {
                  "type": "string",
                  "description": "The AreaCode in ISO3166-2 format. Meant to be used for USA and should look like this: 'US-CA'.",
                  "maxLength": 10,
                  "minLength": 0,
                  "nullable": true
                }
              }
            },
            "AdminApiCoreV2HandlersQueryCustomerAddressGetCustomerAddressResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Addresses": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryCustomerAddressGetCustomerAddressResponse_AddressData"
                  }
                }
              }
            },
            "AdminApiCoreV2HandlersQueryCustomerAddressGetCustomerAddressResponse_AddressData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "FirstName": {
                  "type": "string",
                  "nullable": true
                },
                "LastName": {
                  "type": "string",
                  "nullable": true
                },
                "CompanyName": {
                  "type": "string",
                  "nullable": true
                },
                "Street": {
                  "type": "string",
                  "nullable": true
                },
                "Street2": {
                  "type": "string",
                  "nullable": true
                },
                "PostalCode": {
                  "type": "string",
                  "nullable": true
                },
                "City": {
                  "type": "string",
                  "nullable": true
                },
                "CareOf": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "AdminApiCoreV2HandlersQueryOrdersGetOrderResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "OrderId": {
                  "type": "integer",
                  "format": "int64"
                },
                "MerchantReference": {
                  "type": "string",
                  "nullable": true
                },
                "Currency": {
                  "type": "string",
                  "nullable": true
                },
                "Country": {
                  "type": "string",
                  "nullable": true
                },
                "SignupForNewsletter": {
                  "type": "boolean",
                  "nullable": true
                },
                "MerchantProvidedQuestionAnswer": {
                  "type": "boolean",
                  "nullable": true
                },
                "OrderItemActions": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_OrderItemActionData"
                  }
                },
                "Customer": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_CustomerData"
                    }
                  ]
                },
                "BillingAddress": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_AddressData"
                    }
                  ]
                },
                "ShippingAddress": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_AddressData"
                    }
                  ]
                },
                "PaymentTransactions": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_PaymentTransactionData"
                  }
                },
                "IdentityVerification": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_IdentityVerificationData"
                    }
                  ]
                },
                "Upsell": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_UpsellProperties"
                    }
                  ]
                },
                "MerchantProvidedMetadata": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_MerchantProvidedMetadataTag"
                  }
                }
              }
            },
            "AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_OrderItemActionData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "MerchantReference": {
                  "type": "string",
                  "nullable": true
                },
                "Description": {
                  "type": "string",
                  "nullable": true
                },
                "Id": {
                  "type": "integer",
                  "format": "int64"
                },
                "Quantity": {
                  "type": "integer",
                  "format": "int32"
                },
                "PricePerItemIncVat": {
                  "type": "number",
                  "format": "decimal"
                },
                "PricePerItemExVat": {
                  "type": "number",
                  "format": "decimal"
                },
                "ActionType": {
                  "$ref": "#/components/schemas/InfrastructureConstantsOrderItemActionType"
                },
                "PaymentTransactionId": {
                  "type": "integer",
                  "format": "int64"
                },
                "Type": {
                  "$ref": "#/components/schemas/InfrastructureConstantsOrderItemType"
                },
                "MetaData": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_OrderItemMetaData"
                    }
                  ]
                }
              }
            },
            "InfrastructureConstantsOrderItemActionType": {
              "type": "integer",
              "description": "",
              "x-enumNames": [
                "Create",
                "Reserve",
                "Ship",
                "Return",
                "Release"
              ],
              "enum": [
                0,
                1,
                2,
                3,
                4
              ]
            },
            "InfrastructureConstantsOrderItemType": {
              "type": "integer",
              "description": "",
              "x-enumNames": [
                "Product",
                "Discount",
                "Fee",
                "Shipping"
              ],
              "enum": [
                0,
                1,
                2,
                3
              ]
            },
            "AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_OrderItemMetaData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "HasRisk": {
                  "type": "boolean",
                  "nullable": true
                },
                "ShippingMethodMerchantReference": {
                  "type": "string",
                  "nullable": true
                },
                "ShippingMethodSecondaryOptionMerchantReference": {
                  "type": "string",
                  "nullable": true
                },
                "ShippingMethodAccessCode": {
                  "type": "string",
                  "nullable": true
                },
                "AdditionalShippingProperties": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_OrderItemMetaData_AdditionalShippingPropertiesData"
                    }
                  ]
                },
                "TravelInformation": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_OrderItemMetaData_TravelInformationData"
                    }
                  ]
                },
                "Ingrid": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CommonModelsOrderItemIngrid"
                    }
                  ]
                },
                "HeaderLines": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "type": "string"
                  }
                },
                "FooterLines": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_OrderItemMetaData_AdditionalShippingPropertiesData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "ShippingProvider": {
                  "type": "string",
                  "nullable": true
                },
                "ServiceId": {
                  "type": "string",
                  "nullable": true
                },
                "Agent": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_OrderItemMetaData_AdditionalShippingPropertiesData_AgentData"
                    }
                  ]
                }
              }
            },
            "AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_OrderItemMetaData_AdditionalShippingPropertiesData_AgentData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Id": {
                  "type": "string",
                  "nullable": true
                },
                "Name": {
                  "type": "string",
                  "nullable": true
                },
                "MapLongitude": {
                  "type": "number",
                  "format": "double",
                  "nullable": true
                },
                "MapLatitude": {
                  "type": "number",
                  "format": "double",
                  "nullable": true
                },
                "Address1": {
                  "type": "string",
                  "nullable": true
                },
                "Address2": {
                  "type": "string",
                  "nullable": true
                },
                "ZipCode": {
                  "type": "string",
                  "nullable": true
                },
                "City": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_OrderItemMetaData_TravelInformationData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "DepartureCountry": {
                  "type": "string",
                  "nullable": true
                },
                "DepartureCity": {
                  "type": "string",
                  "nullable": true
                },
                "DepartureIATACode": {
                  "type": "string",
                  "nullable": true
                },
                "ArrivalCountry": {
                  "type": "string",
                  "nullable": true
                },
                "ArrivalCity": {
                  "type": "string",
                  "nullable": true
                },
                "ArrivalIATACode": {
                  "type": "string",
                  "nullable": true
                },
                "StopOverCountry": {
                  "type": "string",
                  "nullable": true
                },
                "StopOverCity": {
                  "type": "string",
                  "nullable": true
                },
                "StopOverIATACode": {
                  "type": "string",
                  "nullable": true
                },
                "TravelType": {
                  "type": "string",
                  "nullable": true
                },
                "BookingDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "DepartureDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "ReturnDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "DaysToDeparture": {
                  "type": "integer",
                  "format": "int32"
                },
                "NoOfPassengers": {
                  "type": "integer",
                  "format": "int32"
                },
                "Travelers": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_OrderItemMetaData_TravelInformationData_Traveler"
                  }
                },
                "Class": {
                  "type": "string",
                  "nullable": true
                },
                "Airline": {
                  "type": "string",
                  "nullable": true
                },
                "NoOfLuggage": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_OrderItemMetaData_TravelInformationData_Traveler": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "FirstName": {
                  "type": "string",
                  "nullable": true
                },
                "LastName": {
                  "type": "string",
                  "nullable": true
                },
                "IsMainTraveller": {
                  "type": "boolean"
                },
                "Gender": {
                  "$ref": "#/components/schemas/InfrastructureConstantsGender"
                },
                "DateOfBirth": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "InfrastructureConstantsGender": {
              "type": "integer",
              "description": "",
              "x-enumNames": [
                "Unknown",
                "Female",
                "Male"
              ],
              "enum": [
                0,
                1,
                2
              ]
            },
            "CommonModelsOrderItemIngrid": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Weight": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": true
                },
                "Sku": {
                  "type": "string",
                  "nullable": true
                },
                "ShippingDate": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CommonModelsOrderItemIngrid_ShippingDateRange"
                    }
                  ]
                },
                "Attributes": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "type": "string"
                  }
                },
                "Dimensions": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CommonModelsOrderItemIngrid_ItemDimensions"
                    }
                  ]
                },
                "OutOfStock": {
                  "type": "boolean",
                  "nullable": true
                },
                "Discount": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true
                }
              }
            },
            "CommonModelsOrderItemIngrid_ShippingDateRange": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Start": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true
                },
                "End": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true
                }
              }
            },
            "CommonModelsOrderItemIngrid_ItemDimensions": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Height": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": true
                },
                "Length": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": true
                },
                "Width": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": true
                }
              }
            },
            "AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_CustomerData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "FirstName": {
                  "type": "string",
                  "nullable": true
                },
                "LastName": {
                  "type": "string",
                  "nullable": true
                },
                "Email": {
                  "type": "string",
                  "nullable": true
                },
                "MobileNumber": {
                  "type": "string",
                  "nullable": true
                },
                "PersonalNumber": {
                  "type": "string",
                  "nullable": true
                },
                "VatNumber": {
                  "type": "string",
                  "nullable": true
                },
                "JuridicalType": {
                  "$ref": "#/components/schemas/InfrastructureConstantsJuridicalType"
                },
                "DateOfBirth": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true
                },
                "Gender": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InfrastructureConstantsGender"
                    }
                  ]
                }
              }
            },
            "InfrastructureConstantsJuridicalType": {
              "type": "integer",
              "description": "",
              "x-enumNames": [
                "Physical",
                "Company"
              ],
              "enum": [
                0,
                1
              ]
            },
            "AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_AddressData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "FirstName": {
                  "type": "string",
                  "nullable": true
                },
                "LastName": {
                  "type": "string",
                  "nullable": true
                },
                "CompanyName": {
                  "type": "string",
                  "nullable": true
                },
                "CareOf": {
                  "type": "string",
                  "nullable": true
                },
                "Street": {
                  "type": "string",
                  "nullable": true
                },
                "Street2": {
                  "type": "string",
                  "nullable": true
                },
                "PostalCode": {
                  "type": "string",
                  "nullable": true
                },
                "City": {
                  "type": "string",
                  "nullable": true
                },
                "CountryCode": {
                  "type": "string",
                  "nullable": true
                },
                "Area": {
                  "type": "string",
                  "nullable": true
                },
                "AreaCode": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_PaymentTransactionData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PaymentTransactionId": {
                  "type": "integer",
                  "format": "int64"
                },
                "OrderId": {
                  "type": "integer",
                  "format": "int64"
                },
                "OriginalPaymentTransactionId": {
                  "type": "integer",
                  "format": "int64",
                  "nullable": true
                },
                "Type": {
                  "$ref": "#/components/schemas/InfrastructureConstantsPaymentTransactionType"
                },
                "Amount": {
                  "type": "number",
                  "format": "decimal"
                },
                "Currency": {
                  "type": "string",
                  "nullable": true
                },
                "ProviderTransactionId": {
                  "type": "string",
                  "nullable": true
                },
                "ProviderResultCode": {
                  "type": "string",
                  "nullable": true
                },
                "ProviderResultDescription": {
                  "type": "string",
                  "nullable": true
                },
                "Status": {
                  "$ref": "#/components/schemas/InfrastructureConstantsPaymentTransactionStatus"
                },
                "Timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true
                },
                "PaymentMethodName": {
                  "type": "string",
                  "nullable": true
                },
                "PaymentMethodSubtypeCode": {
                  "type": "string",
                  "nullable": true
                },
                "ErrorCode": {
                  "type": "string",
                  "nullable": true
                },
                "ErrorCodeDescription": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "InfrastructureConstantsPaymentTransactionType": {
              "type": "integer",
              "description": "",
              "x-enumNames": [
                "Preauthorization",
                "Debit",
                "Credit",
                "Capture",
                "Reversal",
                "Refund",
                "UpdateInvoice",
                "Registration"
              ],
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7
              ]
            },
            "AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_IdentityVerificationData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "RequireIdentityVerification": {
                  "type": "boolean",
                  "nullable": true
                },
                "IdentityVerified": {
                  "type": "boolean",
                  "nullable": true
                }
              }
            },
            "AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_UpsellProperties": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "IsUpsellOrder": {
                  "type": "boolean"
                },
                "EligibleForUpsell": {
                  "type": "boolean"
                },
                "EligibleForUpsellUntil": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true
                }
              }
            },
            "AdminApiCoreV2HandlersQueryOrdersGetOrderResponse_MerchantProvidedMetadataTag": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Key": {
                  "type": "string",
                  "nullable": true
                },
                "Value": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "AdminApiCoreV2HandlersQueryPaymentTransactionGetPaymentTransactionResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PaymentTransactionId": {
                  "type": "integer",
                  "format": "int64"
                },
                "OrderId": {
                  "type": "integer",
                  "format": "int64"
                },
                "Type": {
                  "type": "string",
                  "nullable": true
                },
                "Amount": {
                  "type": "number",
                  "format": "decimal"
                },
                "Currency": {
                  "type": "string",
                  "nullable": true
                },
                "Status": {
                  "type": "string",
                  "nullable": true
                },
                "ProviderTransactionId": {
                  "type": "string",
                  "nullable": true
                },
                "ProviderResultCode": {
                  "type": "string",
                  "nullable": true
                },
                "ProviderResultDescription": {
                  "type": "string",
                  "nullable": true
                },
                "PaymentMethodName": {
                  "type": "string",
                  "nullable": true
                },
                "PaymentMethodSubtypeCode": {
                  "type": "string",
                  "nullable": true
                },
                "Timestamp": {
                  "type": "string",
                  "format": "date-time"
                },
                "ErrorCode": {
                  "type": "string",
                  "nullable": true
                },
                "ErrorCodeDescription": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "AdminApiCoreV1HandlersCommandRetryReversalPaymentTransactionRetryReversalPaymentTransactionResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PaymentTransactionId": {
                  "type": "integer",
                  "format": "int64"
                },
                "Status": {
                  "$ref": "#/components/schemas/InfrastructureConstantsPaymentTransactionStatus"
                }
              }
            },
            "AdminApiV1ModelsRetryReversalPaymentTransactionRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV1ModelsRequestBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "PaymentReference": {
                      "type": "integer",
                      "description": "The reversal payment transaction id from the update items response",
                      "format": "int64",
                      "example": 2233444
                    }
                  }
                }
              ]
            },
            "AdminApiV1ModelsRequestBase": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "MerchantApiKey"
              ],
              "properties": {
                "RequestId": {
                  "type": "string",
                  "description": "A GUID formatted string used to avoid the same request being executed multiple times.The GUID will be stored for 7 days,\nand during that time, any requests sent with the same GUID will be denied.https://guidgenerator.com/online-guid-generator.aspx",
                  "format": "guid",
                  "example": "fd421f5f-d5cb-442b-a45e-de46dc38b586"
                },
                "MerchantApiKey": {
                  "type": "string",
                  "description": "Will be provided by Qliro Checkout when setting up merchant account",
                  "maxLength": 50,
                  "minLength": 0,
                  "example": "HATS"
                }
              }
            },
            "CoreCommonHandlersCommandReturnItemsCommonReturnItemsResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PaymentTransactions": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/CoreCommonParametersNewlyCreatedPayment"
                  }
                }
              }
            },
            "AdminApiV2ModelsReturnItemsRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsRequestBaseWithCurrency"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "Returns"
                  ],
                  "properties": {
                    "Returns": {
                      "type": "array",
                      "description": "An array of objects containing the order items, fees, discounts and PaymentTransactionId.",
                      "items": {
                        "$ref": "#/components/schemas/AdminApiV2ModelsReturnItemsRequest_Return"
                      }
                    }
                  }
                }
              ]
            },
            "AdminApiV2ModelsReturnItemsRequest_Return": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "PaymentTransactionId",
                "OrderItems"
              ],
              "properties": {
                "PaymentTransactionId": {
                  "type": "integer",
                  "description": "A reference to the payment transaction. This reference was communicated in the notification message after a MarkItemsAsShipped call was processed.",
                  "format": "int64",
                  "example": 5451215
                },
                "OrderItems": {
                  "type": "array",
                  "description": "Order items to return.",
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV2ModelsReturnItemsRequest_OrderItem"
                  }
                },
                "Fees": {
                  "type": "array",
                  "description": "Fees that should be applied to the order.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV2ModelsReturnItemsRequest_FeeItemData"
                  }
                },
                "Discounts": {
                  "type": "array",
                  "description": "Discounts that should be applied to the order.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV2ModelsReturnItemsRequest_DiscountItemData"
                  }
                }
              }
            },
            "AdminApiV2ModelsReturnItemsRequest_OrderItem": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsOrderItemBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "AdminApiV2ModelsReturnItemsRequest_FeeItemData": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "MerchantReference",
                "PricePerItemIncVat",
                "PricePerItemExVat"
              ],
              "properties": {
                "MerchantReference": {
                  "type": "string",
                  "description": "A string generated by the merchant to identify the fee item. The combination of MerchantReference and PricePerItemIncVat is used to uniquely identify the fee item. Maximum length is 200 characters.",
                  "maxLength": 400,
                  "minLength": 1,
                  "example": "ReturnFee"
                },
                "Description": {
                  "type": "string",
                  "description": "A name or description of the fee item.",
                  "maxLength": 4000,
                  "nullable": true,
                  "example": "Return Fee"
                },
                "PricePerItemIncVat": {
                  "type": "number",
                  "description": "The price per item including Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99, 99.9 or 99.99.",
                  "format": "decimal",
                  "example": 100
                },
                "PricePerItemExVat": {
                  "type": "number",
                  "description": "The price per item excluding Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99, 99.9 or 99.99.",
                  "format": "decimal",
                  "example": 66.66
                }
              }
            },
            "AdminApiV2ModelsReturnItemsRequest_DiscountItemData": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "MerchantReference",
                "PricePerItemIncVat",
                "PricePerItemExVat"
              ],
              "properties": {
                "MerchantReference": {
                  "type": "string",
                  "description": "A string generated by the merchant to identify the discount item. The combination of MerchantReference and PricePerItemIncVat is used to uniquely identify the discount item. Maximum length is 200 characters.",
                  "maxLength": 400,
                  "minLength": 1,
                  "example": "DiscountItem_1"
                },
                "Description": {
                  "type": "string",
                  "description": "A name or description of the discount item.",
                  "maxLength": 4000,
                  "nullable": true,
                  "example": "Discount item"
                },
                "PricePerItemIncVat": {
                  "type": "number",
                  "description": "The price per item including Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. -99, -99.9 or -99.99. Note: This value must be below zero.",
                  "format": "decimal",
                  "example": -20
                },
                "PricePerItemExVat": {
                  "type": "number",
                  "description": "The price per item excluding Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. -99, -99.9 or -99.99. Note: This value must be below zero.",
                  "format": "decimal",
                  "example": -16
                }
              }
            },
            "AdminApiV2ModelsSetOrderManagementPushUrlRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsRequestBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "MerchantOrderManagementStatusPushUrl"
                  ],
                  "properties": {
                    "OrderId": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "MerchantOrderManagementStatusPushUrl": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              ]
            },
            "AdminApiV1ModelsGetConsolidatedSettlementsResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Settlements": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV1ModelsSettlementData"
                  }
                },
                "PendingSettlements": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV1ModelsPendingSettlementData"
                  }
                },
                "RejectedSettlements": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV1ModelsRejectedSettlementData"
                  }
                }
              }
            },
            "AdminApiV1ModelsSettlementData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "OrderId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 67890
                },
                "PaymentTransactionId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 685258
                },
                "MerchantOrderReference": {
                  "type": "string",
                  "nullable": true,
                  "example": "merchant-order-id-111222333"
                },
                "BatchId": {
                  "type": "string",
                  "nullable": true,
                  "example": 123456
                },
                "Action": {
                  "example": "Debit",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InfrastructureConstantsSettlementSettlementTransactionAction"
                    }
                  ]
                },
                "Type": {
                  "example": "Transaction",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InfrastructureConstantsSettlementSettlementTransactionType"
                    }
                  ]
                },
                "CurrencyCode": {
                  "type": "string",
                  "nullable": true,
                  "example": "SEK"
                },
                "Amount": {
                  "type": "number",
                  "format": "decimal",
                  "example": 150.24
                },
                "CountryCode": {
                  "type": "string",
                  "nullable": true,
                  "example": "SE"
                },
                "AcquirerName": {
                  "type": "string",
                  "nullable": true
                },
                "PaymentMethodType": {
                  "type": "string",
                  "nullable": true,
                  "example": "CREDITCARDS"
                },
                "PaymentMethodSubType": {
                  "type": "string",
                  "nullable": true,
                  "example": "VISA"
                },
                "PspSettlementDate": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2021/01/15"
                },
                "ImportSettlementDate": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2021/01/17"
                },
                "TransactionCompletedDate": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2021/01/17"
                },
                "VatRate": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true,
                  "example": 23.56
                },
                "AmountExcludingVat": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true,
                  "example": 279
                },
                "FxRate": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true,
                  "example": 279
                },
                "FxCurrencyCode": {
                  "type": "string",
                  "nullable": true,
                  "example": "SEK"
                },
                "FxTotal": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true,
                  "example": 279
                }
              }
            },
            "InfrastructureConstantsSettlementSettlementTransactionAction": {
              "type": "integer",
              "description": "",
              "x-enumNames": [
                "Debit",
                "Credit"
              ],
              "enum": [
                0,
                1
              ]
            },
            "InfrastructureConstantsSettlementSettlementTransactionType": {
              "type": "integer",
              "description": "",
              "x-enumNames": [
                "Transaction",
                "Fee",
                "Chargeback"
              ],
              "enum": [
                0,
                1,
                2
              ]
            },
            "AdminApiV1ModelsPendingSettlementData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PaymentTransactionId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 125452
                },
                "Action": {
                  "example": "Debit",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InfrastructureConstantsSettlementSettlementTransactionAction"
                    }
                  ]
                },
                "Type": {
                  "example": "Transaction",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InfrastructureConstantsSettlementSettlementTransactionType"
                    }
                  ]
                },
                "CurrencyCode": {
                  "type": "string",
                  "nullable": true,
                  "example": "SEK"
                },
                "Amount": {
                  "type": "number",
                  "format": "decimal",
                  "example": 155.24
                },
                "PaymentMethodType": {
                  "type": "string",
                  "nullable": true,
                  "example": "CREDITCARDS"
                },
                "PaymentMethodSubType": {
                  "type": "string",
                  "nullable": true,
                  "example": "VISA"
                },
                "PspSettlementDate": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2021/01/15"
                },
                "ImportSettlementDate": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2021/01/17"
                },
                "TransactionCompletedDate": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2021/01/17"
                },
                "BatchId": {
                  "type": "string",
                  "nullable": true,
                  "example": 54521254
                },
                "MerchantOrderReference": {
                  "type": "string",
                  "nullable": true,
                  "example": "merchant-order-id-111222332"
                },
                "VatRate": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true,
                  "example": 23.56
                },
                "AmountExcludingVat": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true,
                  "example": 279
                },
                "FxRate": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true,
                  "example": 279
                },
                "FxCurrencyCode": {
                  "type": "string",
                  "nullable": true,
                  "example": "SEK"
                },
                "FxTotal": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true,
                  "example": 279
                }
              }
            },
            "AdminApiV1ModelsRejectedSettlementData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PaymentTransactionId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 125452
                },
                "Action": {
                  "example": "Debit",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InfrastructureConstantsSettlementSettlementTransactionAction"
                    }
                  ]
                },
                "Type": {
                  "example": "Transaction",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InfrastructureConstantsSettlementSettlementTransactionType"
                    }
                  ]
                },
                "CurrencyCode": {
                  "type": "string",
                  "nullable": true,
                  "example": "SEK"
                },
                "Amount": {
                  "type": "number",
                  "format": "decimal",
                  "example": 1254.21
                },
                "PaymentMethodType": {
                  "type": "string",
                  "nullable": true,
                  "example": "CREDITCARDS"
                },
                "PaymentMethodSubType": {
                  "type": "string",
                  "nullable": true,
                  "example": "VISA"
                },
                "PspSettlementDate": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2021/01/15"
                },
                "ImportSettlementDate": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2021/01/17"
                },
                "BatchId": {
                  "type": "string",
                  "nullable": true,
                  "example": 6652542
                },
                "VatRate": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true,
                  "example": 23.56
                },
                "AmountExcludingVat": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true,
                  "example": 279
                },
                "FxRate": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true,
                  "example": 279
                },
                "FxCurrencyCode": {
                  "type": "string",
                  "nullable": true,
                  "example": "SEK"
                },
                "FxTotal": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true,
                  "example": 279
                }
              }
            },
            "InfrastructureConstantsSettlementSettlementStatus": {
              "type": "integer",
              "description": "",
              "x-enumNames": [
                "Accepted",
                "Rejected",
                "Pending"
              ],
              "enum": [
                0,
                1,
                2
              ]
            },
            "AdminApiV1ModelsGetBankTransferBatchDetailsResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "SettlementTransactions": {
                  "type": "array",
                  "description": "Array of settlement transactions.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV1ModelsGetBankTransferBatchDetailsResponse_SettlementTransactionData"
                  }
                },
                "PendingTransactions": {
                  "type": "array",
                  "description": "Array of pending transactions.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV1ModelsGetBankTransferBatchDetailsResponse_PendingTransactionData"
                  }
                },
                "RejectedTransactions": {
                  "type": "array",
                  "description": "Array of rejected transactions.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV1ModelsGetBankTransferBatchDetailsResponse_RejectedTransactionData"
                  }
                },
                "SettlementTransactionSummary": {
                  "description": "Summary of the settlement transactions counts and sums.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiV1ModelsGetBankTransferBatchDetailsResponse_Summary"
                    }
                  ]
                },
                "PendingTransactionsSummary": {
                  "description": "Summary of the pending transactions counts and sums.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiV1ModelsGetBankTransferBatchDetailsResponse_Summary"
                    }
                  ]
                },
                "RejectedTransactionsSummary": {
                  "description": "Summary of the rejected transactions counts and sums.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiV1ModelsGetBankTransferBatchDetailsResponse_Summary"
                    }
                  ]
                }
              }
            },
            "AdminApiV1ModelsGetBankTransferBatchDetailsResponse_SettlementTransactionData": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV1ModelsGetBankTransferBatchDetailsResponse_TransactionData"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "MerchantOrderReference": {
                      "type": "string",
                      "description": "A string generated by the merchant to identify the order uniquely in their system.",
                      "nullable": true,
                      "example": "HATS-c53a-c7b0-5f73-69e8"
                    },
                    "OrderId": {
                      "type": "integer",
                      "description": "The Qliro Checkout order ID.",
                      "format": "int64",
                      "example": 280263
                    },
                    "CountryCode": {
                      "type": "string",
                      "description": "Two uppercase characters. In accordance with ISO 3166-1.",
                      "nullable": true,
                      "example": "SEK"
                    },
                    "AcquirerName": {
                      "type": "string",
                      "description": "The name of the payment provider from which settlements are expected to be received. For example: Bambora, Nets, Qliro, Trustly, PayPal, etc.",
                      "nullable": true
                    },
                    "VatRate": {
                      "type": "number",
                      "format": "decimal",
                      "nullable": true
                    },
                    "AmountExcludingVat": {
                      "type": "number",
                      "format": "decimal",
                      "nullable": true
                    },
                    "FxRate": {
                      "type": "number",
                      "format": "decimal",
                      "nullable": true
                    },
                    "FxCurrencyCode": {
                      "type": "string",
                      "nullable": true
                    },
                    "FxTotal": {
                      "type": "number",
                      "format": "decimal",
                      "nullable": true
                    }
                  }
                }
              ]
            },
            "AdminApiV1ModelsGetBankTransferBatchDetailsResponse_TransactionData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PaymentTransactionId": {
                  "type": "integer",
                  "description": "This ID is a reference to the particular request. Status of the relevant request will be notified with this ID.",
                  "format": "int64",
                  "nullable": true,
                  "example": 283864
                },
                "BatchId": {
                  "type": "string",
                  "description": "The ID of the batch this settlement transaction belongs to.",
                  "nullable": true,
                  "example": 20181105
                },
                "Action": {
                  "description": "The settlement transaction action. Either 'Debit' or 'Credit'.",
                  "example": "Debit",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InfrastructureConstantsSettlementSettlementTransactionAction"
                    }
                  ]
                },
                "Type": {
                  "description": "The type of this settlement entity. Either 'Transaction' or 'Fee'.",
                  "example": "Transaction",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InfrastructureConstantsSettlementSettlementTransactionType"
                    }
                  ]
                },
                "CurrencyCode": {
                  "type": "string",
                  "description": "Three uppercase characters, in accordance with ISO 4217.",
                  "nullable": true,
                  "example": "SEK"
                },
                "Amount": {
                  "type": "number",
                  "description": "The amount of this particular settlement record.",
                  "format": "decimal",
                  "example": 299
                },
                "PaymentMethodType": {
                  "type": "string",
                  "description": "The payment method that was used in this transaction.",
                  "nullable": true,
                  "example": "TRUSTLY"
                },
                "PaymentMethodSubType": {
                  "type": "string",
                  "description": "The payment subtype that was used in this transaction (if any).",
                  "nullable": true
                },
                "PspSettlementDate": {
                  "type": "string",
                  "description": "Date of actual settlement from PSP provider.",
                  "format": "date-time",
                  "example": "2021/01/15"
                },
                "ImportSettlementDate": {
                  "type": "string",
                  "description": "Date when Qliro Checkout processed the settlement.",
                  "format": "date-time",
                  "example": "2021/01/17"
                },
                "TransactionCompletedDate": {
                  "type": "string",
                  "description": "Date when Qliro Checkout processed the transaction.",
                  "format": "date-time",
                  "nullable": true,
                  "example": "2021/01/17"
                },
                "FxRate": {
                  "type": "number",
                  "description": "Number with six decimal places",
                  "format": "decimal",
                  "nullable": true
                },
                "FxCurrencyCode": {
                  "type": "string",
                  "description": "Three uppercase characters, in accordance with ISO 4217",
                  "nullable": true
                },
                "FxTotal": {
                  "type": "number",
                  "description": "Number with six decimal places",
                  "format": "decimal",
                  "nullable": true
                }
              }
            },
            "AdminApiV1ModelsGetBankTransferBatchDetailsResponse_PendingTransactionData": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV1ModelsGetBankTransferBatchDetailsResponse_TransactionData"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "AdminApiV1ModelsGetBankTransferBatchDetailsResponse_RejectedTransactionData": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV1ModelsGetBankTransferBatchDetailsResponse_TransactionData"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "AdminApiV1ModelsGetBankTransferBatchDetailsResponse_Summary": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "DebitTransactionsTotalSum": {
                  "type": "number",
                  "description": "The sum of all debit transactions.",
                  "format": "decimal",
                  "example": 796
                },
                "DebitTransactionsCount": {
                  "type": "integer",
                  "description": "The count of the number of debit transaction.",
                  "format": "int32",
                  "example": 3
                },
                "CreditTransactionsTotalSum": {
                  "type": "number",
                  "description": "The sum of all credit transactions.",
                  "format": "decimal",
                  "example": 285.52
                },
                "CreditTransactionsCount": {
                  "type": "integer",
                  "description": "The count of the number of credit transaction.",
                  "format": "int32",
                  "example": 2
                },
                "FeeTransactionsTotalSum": {
                  "type": "number",
                  "description": "The sum of all fee transactions.",
                  "format": "decimal",
                  "example": 0
                },
                "FeeTransactionsCount": {
                  "type": "integer",
                  "description": "The count of the number of fee transaction.",
                  "format": "int32",
                  "example": 0
                }
              }
            },
            "AdminApiV2ModelsSettlementsGetSettlementsByBatchIdResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Settlements": {
                  "type": "array",
                  "description": "A list of Accepted settlements.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV2ModelsSettlementsCommonSettlementData"
                  }
                },
                "PendingSettlements": {
                  "type": "array",
                  "description": "A list of Pending settlements.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV2ModelsSettlementsCommonPendingSettlementData"
                  }
                },
                "RejectedSettlements": {
                  "type": "array",
                  "description": "A list of Rejected settlements. ",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV2ModelsSettlementsCommonRejectedSettlementData"
                  }
                },
                "TotalSummary": {
                  "description": "A Summary of all settlement transactions.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiV2ModelsSettlementsGetSettlementsByBatchIdResponse_Summary"
                    }
                  ]
                },
                "SettlementTransactionSummary": {
                  "description": "A Summary of accepted settlement transactions.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiV2ModelsSettlementsGetSettlementsByBatchIdResponse_Summary"
                    }
                  ]
                },
                "PendingTransactionsSummary": {
                  "description": "A Summary of pending settlement transactions.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiV2ModelsSettlementsGetSettlementsByBatchIdResponse_Summary"
                    }
                  ]
                },
                "RejectedTransactionsSummary": {
                  "description": "A Summary of rejected settlement transactions.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AdminApiV2ModelsSettlementsGetSettlementsByBatchIdResponse_Summary"
                    }
                  ]
                }
              }
            },
            "AdminApiV2ModelsSettlementsCommonSettlementData": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsSettlementsCommonTransactionData"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "OrderId": {
                      "type": "integer",
                      "description": "The Qliro Checkout order ID.",
                      "format": "int64"
                    },
                    "MerchantOrderReference": {
                      "type": "string",
                      "description": "A string generated by the merchant to identify the order uniquely in their system.",
                      "nullable": true
                    },
                    "CountryCode": {
                      "type": "string",
                      "description": "Two uppercase characters. In accordance with ISO 3166-1.",
                      "nullable": true
                    },
                    "AcquirerName": {
                      "type": "string",
                      "description": "The name of the payment provider from which settlements are expected to be received. For example: Bambora, Nets, Qliro, Trustly, PayPal, etc.",
                      "nullable": true
                    },
                    "VatRate": {
                      "type": "number",
                      "format": "decimal",
                      "nullable": true
                    },
                    "AmountExcludingVat": {
                      "type": "number",
                      "format": "decimal",
                      "nullable": true
                    }
                  }
                }
              ]
            },
            "AdminApiV2ModelsSettlementsCommonTransactionData": {
              "type": "object",
              "x-abstract": true,
              "additionalProperties": false,
              "properties": {
                "PaymentTransactionId": {
                  "type": "integer",
                  "description": "This ID is a reference to the particular request. Status of the relevant request will be notified with this ID.",
                  "format": "int64",
                  "nullable": true
                },
                "BatchId": {
                  "type": "string",
                  "description": "ID of the provider batch money transfer. Different payment methods can have the same BatchId.",
                  "nullable": true
                },
                "Action": {
                  "description": "The settlement transaction action. Either Debit or Credit.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InfrastructureConstantsSettlementSettlementTransactionAction"
                    }
                  ]
                },
                "Type": {
                  "description": "The type of this settlement entity. Either Transaction, Fee or Chargeback.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InfrastructureConstantsSettlementSettlementTransactionType"
                    }
                  ]
                },
                "CurrencyCode": {
                  "type": "string",
                  "description": "Three uppercase characters, in accordance with ISO 4217.",
                  "nullable": true
                },
                "Amount": {
                  "type": "number",
                  "description": "The amount of this particular settlement record.",
                  "format": "decimal"
                },
                "PaymentMethodType": {
                  "type": "string",
                  "description": "The payment method that was used in this transaction.",
                  "nullable": true
                },
                "PaymentMethodSubType": {
                  "type": "string",
                  "description": "The payment subtype that was used in this transaction (if any).",
                  "nullable": true
                },
                "PspSettlementDate": {
                  "type": "string",
                  "description": "Date of actual settlement from PSP provider.",
                  "format": "date-time"
                },
                "ImportSettlementDate": {
                  "type": "string",
                  "description": "Date when Qliro Checkout processed the settlement.",
                  "format": "date-time"
                },
                "TransactionCompletedDate": {
                  "type": "string",
                  "description": "Date when Qliro Checkout processed the transaction.",
                  "format": "date-time"
                },
                "FxRate": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true
                },
                "FxCurrencyCode": {
                  "type": "string",
                  "nullable": true
                },
                "FxTotal": {
                  "type": "number",
                  "format": "decimal",
                  "nullable": true
                }
              }
            },
            "AdminApiV2ModelsSettlementsCommonPendingSettlementData": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsSettlementsCommonTransactionData"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "MerchantOrderReference": {
                      "type": "string",
                      "description": "A string generated by the merchant to identify the order uniquely in their system.",
                      "nullable": true
                    }
                  }
                }
              ]
            },
            "AdminApiV2ModelsSettlementsCommonRejectedSettlementData": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsSettlementsCommonTransactionData"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "AdminApiV2ModelsSettlementsGetSettlementsByBatchIdResponse_Summary": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "DebitTransactionsTotalSum": {
                  "type": "number",
                  "description": "The total amount of the debit transactions.",
                  "format": "decimal"
                },
                "DebitTransactionsCount": {
                  "type": "integer",
                  "description": "The total number of debit transactions.",
                  "format": "int32"
                },
                "CreditTransactionsTotalSum": {
                  "type": "number",
                  "description": "The total amount of the credit transactions.",
                  "format": "decimal"
                },
                "CreditTransactionsCount": {
                  "type": "integer",
                  "description": "The total number of credit transactions.",
                  "format": "int32"
                },
                "FeeTransactionsTotalSum": {
                  "type": "number",
                  "description": "The total amount of the fee transactions.",
                  "format": "decimal"
                },
                "FeeTransactionsCount": {
                  "type": "integer",
                  "description": "The total number of fee transactions.",
                  "format": "int32"
                }
              }
            },
            "AdminApiV2ModelsSettlementsGetSettlementBatchesResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "SettlementBatches": {
                  "type": "array",
                  "description": "A list of Settlement batches.",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV2ModelsSettlementsGetSettlementBatchesResponse_SettlementBatchData"
                  }
                }
              }
            },
            "AdminApiV2ModelsSettlementsGetSettlementBatchesResponse_SettlementBatchData": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "Id": {
                  "type": "integer",
                  "description": "Internal Qliro Checkout id to identify the batch we receive from a payment provider. Use this when querying GetSettlementsByBatchId.",
                  "format": "int64"
                },
                "BatchId": {
                  "type": "string",
                  "description": "ID of the provider batch money transfer. Different payment methods can have the same BatchId.",
                  "nullable": true
                },
                "AcquirerName": {
                  "type": "string",
                  "description": "The name of the payment provider from which settlements are expected to be received. For example: Bambora, Nets, Qliro, Trustly, PayPal, etc.",
                  "nullable": true
                },
                "BatchDate": {
                  "type": "string",
                  "description": "The date when the batch was transferred to a merchants account.",
                  "format": "date-time"
                },
                "CurrencyCode": {
                  "type": "string",
                  "description": "Three uppercase characters, in accordance with ISO 4217.",
                  "nullable": true
                },
                "TotalAmount": {
                  "type": "number",
                  "description": "The total amount of this particular settlement record.",
                  "format": "decimal"
                },
                "TotalFeeAmount": {
                  "type": "number",
                  "description": "The total fee amount of this particular settlement record.",
                  "format": "decimal"
                },
                "FxTotalAmount": {
                  "type": "number",
                  "description": "Fx total amount of this batch",
                  "format": "decimal",
                  "nullable": true
                },
                "FxCurrencyCode": {
                  "type": "string",
                  "description": "Fx  currency of this batch",
                  "nullable": true
                },
                "FxRate": {
                  "type": "number",
                  "description": "fx rate of fx currency ",
                  "format": "decimal",
                  "nullable": true
                }
              }
            },
            "CoreCommonHandlersCommandUpdateItemsCommonUpdateItemsResponse": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "PaymentTransactions": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/CoreCommonParametersNewlyCreatedPayment"
                  }
                }
              }
            },
            "AdminApiV2ModelsUpdateItemsRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsRequestBaseWithCurrency"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "Updates"
                  ],
                  "properties": {
                    "Updates": {
                      "type": "array",
                      "description": "An array of objects containing the order items and PaymentReference.",
                      "items": {
                        "$ref": "#/components/schemas/AdminApiV2ModelsUpdateItemsRequest_Update"
                      }
                    }
                  }
                }
              ]
            },
            "AdminApiV2ModelsUpdateItemsRequest_Update": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "OrderItems"
              ],
              "properties": {
                "PaymentTransactionId": {
                  "type": "integer",
                  "description": "This ID is a reference to the particular request. Status of the relevant request will be notified with this ID.",
                  "format": "int64",
                  "nullable": true,
                  "example": 4541215
                },
                "OrderItems": {
                  "type": "array",
                  "description": "Array of items that is included in the update.",
                  "items": {
                    "$ref": "#/components/schemas/AdminApiV2ModelsUpdateItemsRequest_OrderItem"
                  }
                }
              }
            },
            "AdminApiV2ModelsUpdateItemsRequest_OrderItem": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV2ModelsOrderItemBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "PricePerItemExVat"
                  ],
                  "properties": {
                    "Description": {
                      "type": "string",
                      "description": "A name or description of the order item.",
                      "maxLength": 4000,
                      "nullable": true,
                      "example": "Item description"
                    },
                    "PricePerItemExVat": {
                      "type": "number",
                      "description": "The price per item excluding Value Added Tax. This can be specified with 0, 1 or 2 decimals, e.g. 99, 99.9 or 99.99.",
                      "format": "decimal",
                      "example": 1000
                    }
                  }
                }
              ]
            },
            "AdminApiCoreV1HandlersModelsUpdateMerchantReferenceResponseBase": {
              "type": "object",
              "discriminator": {
                "propertyName": "discriminator",
                "mapping": {
                  "UpdateMerchantReferenceResponse": "#/components/schemas/AdminApiCoreV1HandlersCommandUpdateMerchantReferenceUpdateMerchantReferenceResponse",
                  "UpdateMerchantReferenceWithTransactionResponse": "#/components/schemas/AdminApiCoreV1HandlersCommandUpdateMerchantReferenceUpdateMerchantReferenceWithTransactionResponse"
                }
              },
              "x-abstract": true,
              "additionalProperties": false,
              "required": [
                "discriminator"
              ],
              "properties": {
                "discriminator": {
                  "type": "string"
                }
              }
            },
            "AdminApiCoreV1HandlersCommandUpdateMerchantReferenceUpdateMerchantReferenceResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiCoreV1HandlersModelsUpdateMerchantReferenceResponseBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "Type": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                }
              ]
            },
            "AdminApiCoreV1HandlersCommandUpdateMerchantReferenceUpdateMerchantReferenceWithTransactionResponse": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiCoreV1HandlersModelsUpdateMerchantReferenceResponseBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "Type": {
                      "type": "string",
                      "nullable": true
                    },
                    "PaymentTransactionId": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "Status": {
                      "$ref": "#/components/schemas/InfrastructureConstantsPaymentTransactionStatus"
                    }
                  }
                }
              ]
            },
            "AdminApiV1ModelsUpdateMerchantReferenceRequest": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminApiV1ModelsRequestBase"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "OrderId",
                    "NewMerchantReference"
                  ],
                  "properties": {
                    "OrderId": {
                      "type": "integer",
                      "description": "The Qliro Checkout order ID",
                      "format": "int64",
                      "example": 1215412
                    },
                    "NewMerchantReference": {
                      "type": "string",
                      "description": "The new merchant reference",
                      "minLength": 1,
                      "pattern": "^[A-Za-z0-9_-]{1,25}$",
                      "example": "merchant-reference-new"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "apolloState": {
      "ROOT_QUERY": {
        "openApiDocs": null,
        "adminpi": null,
        "searchResults": {
          "type": "json",
          "json": []
        },
        "searchQuery": "",
        "searchTypes": {
          "type": "json",
          "json": []
        },
        "bigSearchOpen": false,
        "icons": null,
        "apiSingleton": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiSingleton",
          "typename": "apiSingleton"
        },
        "apiOperationsInformationSingleton": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOperationsInformationSingleton",
          "typename": "apiOperationsInformationSingleton"
        },
        "apiOrderTagSingleton": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOrderTagSingleton",
          "typename": "apiOrderTagSingleton"
        }
      },
      "$ROOT_QUERY.apiSingleton": {
        "title": "Qliro API",
        "description": "Choose the call from the menu on the left to access details for that specific call.",
        "__typename": "apiSingleton"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.0.value": {
        "operationId": "createOrder",
        "summary": "Create order",
        "description": "Use this call to create a new order. Set required and optional properties according to your needs.",
        "__typename": "SetRepeaterItemValueOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.0": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.0.value",
          "typename": "SetRepeaterItemValueOperations"
        },
        "__typename": "RepeaterItemOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.1.value": {
        "operationId": "getOrder",
        "summary": "Get order (OrderID)",
        "description": "Get order information by OrderID.",
        "__typename": "SetRepeaterItemValueOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.1": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.1.value",
          "typename": "SetRepeaterItemValueOperations"
        },
        "__typename": "RepeaterItemOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.2.value": {
        "operationId": "getOrderByMerchantReference",
        "summary": "Get order (MerchantReference)",
        "description": "Get order information by MerchantReference.",
        "__typename": "SetRepeaterItemValueOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.2": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.2.value",
          "typename": "SetRepeaterItemValueOperations"
        },
        "__typename": "RepeaterItemOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.3.value": {
        "operationId": "updateOrder",
        "summary": "Update order",
        "description": "Once an order is created, the merchant can update the list of OrderItems by sending an UpdateOrder request.",
        "__typename": "SetRepeaterItemValueOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.3": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.3.value",
          "typename": "SetRepeaterItemValueOperations"
        },
        "__typename": "RepeaterItemOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.4.value": {
        "operationId": "upsellOrder",
        "summary": "Upsell order",
        "description": "Use this call to add upsell items to order.",
        "__typename": "SetRepeaterItemValueOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.4": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.4.value",
          "typename": "SetRepeaterItemValueOperations"
        },
        "__typename": "RepeaterItemOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.5.value": {
        "operationId": "createInStoreOrder",
        "summary": "Create instore order",
        "description": "Use this call to create instore order.",
        "__typename": "SetRepeaterItemValueOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.5": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.5.value",
          "typename": "SetRepeaterItemValueOperations"
        },
        "__typename": "RepeaterItemOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.6.value": {
        "operationId": "getInStoreOrder",
        "summary": "Get instore order",
        "description": "Use this call to get instore order.",
        "__typename": "SetRepeaterItemValueOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.6": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.6.value",
          "typename": "SetRepeaterItemValueOperations"
        },
        "__typename": "RepeaterItemOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.7.value": {
        "operationId": "createMerchantSavedCreditCard",
        "summary": "Save credit card",
        "description": "Use this call to add cards to an existing subscription. Qliro Checkout provides an endpoint on the Merchant API that provides the possibility to return an html snippet on your site that renders a card form enabling the capture of card details while following PCI-DSS. This request will work similar to Create Order html snippet population. New credit card token registration can take time depending of credit card provider. Merchant will be notified about new merchant credit card details by push notification to MerchantSavedCreditCardPushUrl.",
        "__typename": "SetRepeaterItemValueOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.7": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.7.value",
          "typename": "SetRepeaterItemValueOperations"
        },
        "__typename": "RepeaterItemOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.8.value": {
        "operationId": "removeMerchantSavedCreditCard",
        "summary": "Remove credit card ",
        "description": "Use this call to remove saved credit card.",
        "__typename": "SetRepeaterItemValueOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.8": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.8.value",
          "typename": "SetRepeaterItemValueOperations"
        },
        "__typename": "RepeaterItemOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.9.value": {
        "operationId": "Orders",
        "summary": "Get order",
        "description": "Get order information by OrderID.",
        "__typename": "SetRepeaterItemValueOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.9": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.9.value",
          "typename": "SetRepeaterItemValueOperations"
        },
        "__typename": "RepeaterItemOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.10.value": {
        "operationId": "UpdateMerchantReference",
        "summary": "Update merchant reference",
        "description": "Update the MerchantReference of the order.",
        "__typename": "SetRepeaterItemValueOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.10": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.10.value",
          "typename": "SetRepeaterItemValueOperations"
        },
        "__typename": "RepeaterItemOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.11.value": {
        "operationId": "UpdateItems",
        "summary": "Update items",
        "description": "Update items on order if it has not been shipped and contains at least one item that has not been marked as shipped.",
        "__typename": "SetRepeaterItemValueOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.11": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.11.value",
          "typename": "SetRepeaterItemValueOperations"
        },
        "__typename": "RepeaterItemOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.12.value": {
        "operationId": "MarkItemsAsShipped",
        "summary": "Mark items as shipped",
        "description": "Mark order items as shipped. For most payment methods, this will lead to a Capture or Activation and a money transfer.",
        "__typename": "SetRepeaterItemValueOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.12": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.12.value",
          "typename": "SetRepeaterItemValueOperations"
        },
        "__typename": "RepeaterItemOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.13.value": {
        "operationId": "ReturnWithItems",
        "summary": "Return items",
        "description": "Return items of an order and initiate a refund.",
        "__typename": "SetRepeaterItemValueOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton.operations.13": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.13.value",
          "typename": "SetRepeaterItemValueOperations"
        },
        "__typename": "RepeaterItemOperations"
      },
      "$ROOT_QUERY.apiOperationsInformationSingleton": {
        "operations": [
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.0",
            "typename": "RepeaterItemOperations"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.1",
            "typename": "RepeaterItemOperations"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.2",
            "typename": "RepeaterItemOperations"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.3",
            "typename": "RepeaterItemOperations"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.4",
            "typename": "RepeaterItemOperations"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.5",
            "typename": "RepeaterItemOperations"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.6",
            "typename": "RepeaterItemOperations"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.7",
            "typename": "RepeaterItemOperations"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.8",
            "typename": "RepeaterItemOperations"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.9",
            "typename": "RepeaterItemOperations"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.10",
            "typename": "RepeaterItemOperations"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.11",
            "typename": "RepeaterItemOperations"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.12",
            "typename": "RepeaterItemOperations"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOperationsInformationSingleton.operations.13",
            "typename": "RepeaterItemOperations"
          }
        ],
        "__typename": "apiOperationsInformationSingleton"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.merchantApi.0.value": {
        "tag": "Orders",
        "orderIndex": "0",
        "name": "Orders",
        "__typename": "SetRepeaterItemValueMerchantApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.merchantApi.0": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOrderTagSingleton.merchantApi.0.value",
          "typename": "SetRepeaterItemValueMerchantApi"
        },
        "__typename": "RepeaterItemMerchantApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.merchantApi.1.value": {
        "tag": "Upsell",
        "orderIndex": "2",
        "name": "Upsell",
        "__typename": "SetRepeaterItemValueMerchantApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.merchantApi.1": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOrderTagSingleton.merchantApi.1.value",
          "typename": "SetRepeaterItemValueMerchantApi"
        },
        "__typename": "RepeaterItemMerchantApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.merchantApi.2.value": {
        "tag": "MerchantCreditCard",
        "orderIndex": "4",
        "name": "Saved Card Management (for Subscriptions)",
        "__typename": "SetRepeaterItemValueMerchantApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.merchantApi.2": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOrderTagSingleton.merchantApi.2.value",
          "typename": "SetRepeaterItemValueMerchantApi"
        },
        "__typename": "RepeaterItemMerchantApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton": {
        "merchantApi": [
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOrderTagSingleton.merchantApi.0",
            "typename": "RepeaterItemMerchantApi"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOrderTagSingleton.merchantApi.1",
            "typename": "RepeaterItemMerchantApi"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOrderTagSingleton.merchantApi.2",
            "typename": "RepeaterItemMerchantApi"
          }
        ],
        "adminApi": [
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.0",
            "typename": "RepeaterItemAdminApi"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.1",
            "typename": "RepeaterItemAdminApi"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.2",
            "typename": "RepeaterItemAdminApi"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.3",
            "typename": "RepeaterItemAdminApi"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.4",
            "typename": "RepeaterItemAdminApi"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.5",
            "typename": "RepeaterItemAdminApi"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.6",
            "typename": "RepeaterItemAdminApi"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.7",
            "typename": "RepeaterItemAdminApi"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.8",
            "typename": "RepeaterItemAdminApi"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.9",
            "typename": "RepeaterItemAdminApi"
          },
          {
            "type": "id",
            "generated": true,
            "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.10",
            "typename": "RepeaterItemAdminApi"
          }
        ],
        "__typename": "apiOrderTagSingleton"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.0.value": {
        "tag": "Orders",
        "orderIndex": "0",
        "name": "Orders",
        "__typename": "SetRepeaterItemValueAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.0": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.0.value",
          "typename": "SetRepeaterItemValueAdminApi"
        },
        "__typename": "RepeaterItemAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.1.value": {
        "tag": "UpdateOrder",
        "orderIndex": "1",
        "name": "Update order",
        "__typename": "SetRepeaterItemValueAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.1": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.1.value",
          "typename": "SetRepeaterItemValueAdminApi"
        },
        "__typename": "RepeaterItemAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.2.value": {
        "tag": "CancelOrder",
        "orderIndex": "2",
        "name": "Cancel order",
        "__typename": "SetRepeaterItemValueAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.2": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.2.value",
          "typename": "SetRepeaterItemValueAdminApi"
        },
        "__typename": "RepeaterItemAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.3.value": {
        "tag": "UpdateItems",
        "orderIndex": "3",
        "name": "Update items",
        "__typename": "SetRepeaterItemValueAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.3": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.3.value",
          "typename": "SetRepeaterItemValueAdminApi"
        },
        "__typename": "RepeaterItemAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.4.value": {
        "tag": "MarkItemsAsShipped",
        "orderIndex": "4",
        "name": "Mark items as shipped",
        "__typename": "SetRepeaterItemValueAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.4": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.4.value",
          "typename": "SetRepeaterItemValueAdminApi"
        },
        "__typename": "RepeaterItemAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.5.value": {
        "tag": "AddItemsToInvoice",
        "orderIndex": "5",
        "name": "Add items to invoice",
        "__typename": "SetRepeaterItemValueAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.5": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.5.value",
          "typename": "SetRepeaterItemValueAdminApi"
        },
        "__typename": "RepeaterItemAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.6.value": {
        "tag": "ReturnItems",
        "orderIndex": "6",
        "name": "Return Items",
        "__typename": "SetRepeaterItemValueAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.6": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.6.value",
          "typename": "SetRepeaterItemValueAdminApi"
        },
        "__typename": "RepeaterItemAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.7.value": {
        "tag": "RetryReversalPaymentTransaction",
        "orderIndex": "7",
        "name": "Retry reversal payment transaction",
        "__typename": "SetRepeaterItemValueAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.7": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.7.value",
          "typename": "SetRepeaterItemValueAdminApi"
        },
        "__typename": "RepeaterItemAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.8.value": {
        "tag": "PaymentTransactions",
        "orderIndex": "8",
        "name": "Payment transactions",
        "__typename": "SetRepeaterItemValueAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.8": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.8.value",
          "typename": "SetRepeaterItemValueAdminApi"
        },
        "__typename": "RepeaterItemAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.9.value": {
        "tag": "Settlements",
        "orderIndex": "9",
        "name": "Settlements",
        "__typename": "SetRepeaterItemValueAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.9": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.9.value",
          "typename": "SetRepeaterItemValueAdminApi"
        },
        "__typename": "RepeaterItemAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.10.value": {
        "tag": "MerchantPayment",
        "orderIndex": "10",
        "name": "Merchant payment",
        "__typename": "SetRepeaterItemValueAdminApi"
      },
      "$ROOT_QUERY.apiOrderTagSingleton.adminApi.10": {
        "value": {
          "type": "id",
          "generated": true,
          "id": "$ROOT_QUERY.apiOrderTagSingleton.adminApi.10.value",
          "typename": "SetRepeaterItemValueAdminApi"
        },
        "__typename": "RepeaterItemAdminApi"
      }
    },
    "__N_SSG": true
  },
  "page": "/docs/api/[[...params]]",
  "query": {
    "params": [
      "Orders-post"
    ]
  },
  "buildId": "KsCzEpRmodb9lfZl-FxsN",
  "nextExport": false,
  "isFallback": false,
  "gsp": true,
  "customServer": true,
  "appGip": true,
  "head": [
    [
      "meta",
      {
        "charSet": "utf-8"
      }
    ],
    [
      "meta",
      {
        "name": "viewport",
        "content": "width=device-width"
      }
    ]
  ]
}
